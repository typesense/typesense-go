// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_client.go -package=mocks -source client.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	api "github.com/typesense/typesense-go/v2/typesense/api"
	gomock "go.uber.org/mock/gomock"
)

// MockAPIClientInterface is a mock of APIClientInterface interface.
type MockAPIClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAPIClientInterfaceMockRecorder
}

// MockAPIClientInterfaceMockRecorder is the mock recorder for MockAPIClientInterface.
type MockAPIClientInterfaceMockRecorder struct {
	mock *MockAPIClientInterface
}

// NewMockAPIClientInterface creates a new mock instance.
func NewMockAPIClientInterface(ctrl *gomock.Controller) *MockAPIClientInterface {
	mock := &MockAPIClientInterface{ctrl: ctrl}
	mock.recorder = &MockAPIClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIClientInterface) EXPECT() *MockAPIClientInterfaceMockRecorder {
	return m.recorder
}

// CreateAnalyticsEvent mocks base method.
func (m *MockAPIClientInterface) CreateAnalyticsEvent(ctx context.Context, body api.CreateAnalyticsEventJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAnalyticsEvent", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnalyticsEvent indicates an expected call of CreateAnalyticsEvent.
func (mr *MockAPIClientInterfaceMockRecorder) CreateAnalyticsEvent(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnalyticsEvent", reflect.TypeOf((*MockAPIClientInterface)(nil).CreateAnalyticsEvent), varargs...)
}

// CreateAnalyticsEventWithBody mocks base method.
func (m *MockAPIClientInterface) CreateAnalyticsEventWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAnalyticsEventWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnalyticsEventWithBody indicates an expected call of CreateAnalyticsEventWithBody.
func (mr *MockAPIClientInterfaceMockRecorder) CreateAnalyticsEventWithBody(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnalyticsEventWithBody", reflect.TypeOf((*MockAPIClientInterface)(nil).CreateAnalyticsEventWithBody), varargs...)
}

// CreateAnalyticsEventWithBodyWithResponse mocks base method.
func (m *MockAPIClientInterface) CreateAnalyticsEventWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.CreateAnalyticsEventResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAnalyticsEventWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.CreateAnalyticsEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnalyticsEventWithBodyWithResponse indicates an expected call of CreateAnalyticsEventWithBodyWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) CreateAnalyticsEventWithBodyWithResponse(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnalyticsEventWithBodyWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).CreateAnalyticsEventWithBodyWithResponse), varargs...)
}

// CreateAnalyticsEventWithResponse mocks base method.
func (m *MockAPIClientInterface) CreateAnalyticsEventWithResponse(ctx context.Context, body api.CreateAnalyticsEventJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.CreateAnalyticsEventResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAnalyticsEventWithResponse", varargs...)
	ret0, _ := ret[0].(*api.CreateAnalyticsEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnalyticsEventWithResponse indicates an expected call of CreateAnalyticsEventWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) CreateAnalyticsEventWithResponse(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnalyticsEventWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).CreateAnalyticsEventWithResponse), varargs...)
}

// CreateAnalyticsRule mocks base method.
func (m *MockAPIClientInterface) CreateAnalyticsRule(ctx context.Context, body api.CreateAnalyticsRuleJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAnalyticsRule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnalyticsRule indicates an expected call of CreateAnalyticsRule.
func (mr *MockAPIClientInterfaceMockRecorder) CreateAnalyticsRule(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnalyticsRule", reflect.TypeOf((*MockAPIClientInterface)(nil).CreateAnalyticsRule), varargs...)
}

// CreateAnalyticsRuleWithBody mocks base method.
func (m *MockAPIClientInterface) CreateAnalyticsRuleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAnalyticsRuleWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnalyticsRuleWithBody indicates an expected call of CreateAnalyticsRuleWithBody.
func (mr *MockAPIClientInterfaceMockRecorder) CreateAnalyticsRuleWithBody(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnalyticsRuleWithBody", reflect.TypeOf((*MockAPIClientInterface)(nil).CreateAnalyticsRuleWithBody), varargs...)
}

// CreateAnalyticsRuleWithBodyWithResponse mocks base method.
func (m *MockAPIClientInterface) CreateAnalyticsRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.CreateAnalyticsRuleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAnalyticsRuleWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.CreateAnalyticsRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnalyticsRuleWithBodyWithResponse indicates an expected call of CreateAnalyticsRuleWithBodyWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) CreateAnalyticsRuleWithBodyWithResponse(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnalyticsRuleWithBodyWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).CreateAnalyticsRuleWithBodyWithResponse), varargs...)
}

// CreateAnalyticsRuleWithResponse mocks base method.
func (m *MockAPIClientInterface) CreateAnalyticsRuleWithResponse(ctx context.Context, body api.CreateAnalyticsRuleJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.CreateAnalyticsRuleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAnalyticsRuleWithResponse", varargs...)
	ret0, _ := ret[0].(*api.CreateAnalyticsRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnalyticsRuleWithResponse indicates an expected call of CreateAnalyticsRuleWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) CreateAnalyticsRuleWithResponse(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnalyticsRuleWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).CreateAnalyticsRuleWithResponse), varargs...)
}

// CreateCollection mocks base method.
func (m *MockAPIClientInterface) CreateCollection(ctx context.Context, body api.CreateCollectionJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCollection", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCollection indicates an expected call of CreateCollection.
func (mr *MockAPIClientInterfaceMockRecorder) CreateCollection(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollection", reflect.TypeOf((*MockAPIClientInterface)(nil).CreateCollection), varargs...)
}

// CreateCollectionWithBody mocks base method.
func (m *MockAPIClientInterface) CreateCollectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCollectionWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCollectionWithBody indicates an expected call of CreateCollectionWithBody.
func (mr *MockAPIClientInterfaceMockRecorder) CreateCollectionWithBody(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollectionWithBody", reflect.TypeOf((*MockAPIClientInterface)(nil).CreateCollectionWithBody), varargs...)
}

// CreateCollectionWithBodyWithResponse mocks base method.
func (m *MockAPIClientInterface) CreateCollectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.CreateCollectionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCollectionWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.CreateCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCollectionWithBodyWithResponse indicates an expected call of CreateCollectionWithBodyWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) CreateCollectionWithBodyWithResponse(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollectionWithBodyWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).CreateCollectionWithBodyWithResponse), varargs...)
}

// CreateCollectionWithResponse mocks base method.
func (m *MockAPIClientInterface) CreateCollectionWithResponse(ctx context.Context, body api.CreateCollectionJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.CreateCollectionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCollectionWithResponse", varargs...)
	ret0, _ := ret[0].(*api.CreateCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCollectionWithResponse indicates an expected call of CreateCollectionWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) CreateCollectionWithResponse(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollectionWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).CreateCollectionWithResponse), varargs...)
}

// CreateConversationModel mocks base method.
func (m *MockAPIClientInterface) CreateConversationModel(ctx context.Context, body api.CreateConversationModelJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConversationModel", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConversationModel indicates an expected call of CreateConversationModel.
func (mr *MockAPIClientInterfaceMockRecorder) CreateConversationModel(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConversationModel", reflect.TypeOf((*MockAPIClientInterface)(nil).CreateConversationModel), varargs...)
}

// CreateConversationModelWithBody mocks base method.
func (m *MockAPIClientInterface) CreateConversationModelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConversationModelWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConversationModelWithBody indicates an expected call of CreateConversationModelWithBody.
func (mr *MockAPIClientInterfaceMockRecorder) CreateConversationModelWithBody(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConversationModelWithBody", reflect.TypeOf((*MockAPIClientInterface)(nil).CreateConversationModelWithBody), varargs...)
}

// CreateConversationModelWithBodyWithResponse mocks base method.
func (m *MockAPIClientInterface) CreateConversationModelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.CreateConversationModelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConversationModelWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.CreateConversationModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConversationModelWithBodyWithResponse indicates an expected call of CreateConversationModelWithBodyWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) CreateConversationModelWithBodyWithResponse(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConversationModelWithBodyWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).CreateConversationModelWithBodyWithResponse), varargs...)
}

// CreateConversationModelWithResponse mocks base method.
func (m *MockAPIClientInterface) CreateConversationModelWithResponse(ctx context.Context, body api.CreateConversationModelJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.CreateConversationModelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConversationModelWithResponse", varargs...)
	ret0, _ := ret[0].(*api.CreateConversationModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConversationModelWithResponse indicates an expected call of CreateConversationModelWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) CreateConversationModelWithResponse(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConversationModelWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).CreateConversationModelWithResponse), varargs...)
}

// CreateKey mocks base method.
func (m *MockAPIClientInterface) CreateKey(ctx context.Context, body api.CreateKeyJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKey", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKey indicates an expected call of CreateKey.
func (mr *MockAPIClientInterfaceMockRecorder) CreateKey(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKey", reflect.TypeOf((*MockAPIClientInterface)(nil).CreateKey), varargs...)
}

// CreateKeyWithBody mocks base method.
func (m *MockAPIClientInterface) CreateKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKeyWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeyWithBody indicates an expected call of CreateKeyWithBody.
func (mr *MockAPIClientInterfaceMockRecorder) CreateKeyWithBody(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyWithBody", reflect.TypeOf((*MockAPIClientInterface)(nil).CreateKeyWithBody), varargs...)
}

// CreateKeyWithBodyWithResponse mocks base method.
func (m *MockAPIClientInterface) CreateKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.CreateKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKeyWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.CreateKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeyWithBodyWithResponse indicates an expected call of CreateKeyWithBodyWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) CreateKeyWithBodyWithResponse(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyWithBodyWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).CreateKeyWithBodyWithResponse), varargs...)
}

// CreateKeyWithResponse mocks base method.
func (m *MockAPIClientInterface) CreateKeyWithResponse(ctx context.Context, body api.CreateKeyJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.CreateKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKeyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.CreateKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeyWithResponse indicates an expected call of CreateKeyWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) CreateKeyWithResponse(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).CreateKeyWithResponse), varargs...)
}

// Debug mocks base method.
func (m *MockAPIClientInterface) Debug(ctx context.Context, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Debug", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Debug indicates an expected call of Debug.
func (mr *MockAPIClientInterfaceMockRecorder) Debug(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockAPIClientInterface)(nil).Debug), varargs...)
}

// DebugWithResponse mocks base method.
func (m *MockAPIClientInterface) DebugWithResponse(ctx context.Context, reqEditors ...api.RequestEditorFn) (*api.DebugResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DebugWithResponse", varargs...)
	ret0, _ := ret[0].(*api.DebugResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DebugWithResponse indicates an expected call of DebugWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) DebugWithResponse(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).DebugWithResponse), varargs...)
}

// DeleteAlias mocks base method.
func (m *MockAPIClientInterface) DeleteAlias(ctx context.Context, aliasName string, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, aliasName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAlias", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAlias indicates an expected call of DeleteAlias.
func (mr *MockAPIClientInterfaceMockRecorder) DeleteAlias(ctx, aliasName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, aliasName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlias", reflect.TypeOf((*MockAPIClientInterface)(nil).DeleteAlias), varargs...)
}

// DeleteAliasWithResponse mocks base method.
func (m *MockAPIClientInterface) DeleteAliasWithResponse(ctx context.Context, aliasName string, reqEditors ...api.RequestEditorFn) (*api.DeleteAliasResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, aliasName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAliasWithResponse", varargs...)
	ret0, _ := ret[0].(*api.DeleteAliasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAliasWithResponse indicates an expected call of DeleteAliasWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) DeleteAliasWithResponse(ctx, aliasName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, aliasName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAliasWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).DeleteAliasWithResponse), varargs...)
}

// DeleteAnalyticsRule mocks base method.
func (m *MockAPIClientInterface) DeleteAnalyticsRule(ctx context.Context, ruleName string, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, ruleName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAnalyticsRule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAnalyticsRule indicates an expected call of DeleteAnalyticsRule.
func (mr *MockAPIClientInterfaceMockRecorder) DeleteAnalyticsRule(ctx, ruleName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, ruleName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnalyticsRule", reflect.TypeOf((*MockAPIClientInterface)(nil).DeleteAnalyticsRule), varargs...)
}

// DeleteAnalyticsRuleWithResponse mocks base method.
func (m *MockAPIClientInterface) DeleteAnalyticsRuleWithResponse(ctx context.Context, ruleName string, reqEditors ...api.RequestEditorFn) (*api.DeleteAnalyticsRuleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, ruleName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAnalyticsRuleWithResponse", varargs...)
	ret0, _ := ret[0].(*api.DeleteAnalyticsRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAnalyticsRuleWithResponse indicates an expected call of DeleteAnalyticsRuleWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) DeleteAnalyticsRuleWithResponse(ctx, ruleName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, ruleName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnalyticsRuleWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).DeleteAnalyticsRuleWithResponse), varargs...)
}

// DeleteCollection mocks base method.
func (m *MockAPIClientInterface) DeleteCollection(ctx context.Context, collectionName string, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCollection", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockAPIClientInterfaceMockRecorder) DeleteCollection(ctx, collectionName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockAPIClientInterface)(nil).DeleteCollection), varargs...)
}

// DeleteCollectionWithResponse mocks base method.
func (m *MockAPIClientInterface) DeleteCollectionWithResponse(ctx context.Context, collectionName string, reqEditors ...api.RequestEditorFn) (*api.DeleteCollectionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCollectionWithResponse", varargs...)
	ret0, _ := ret[0].(*api.DeleteCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCollectionWithResponse indicates an expected call of DeleteCollectionWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) DeleteCollectionWithResponse(ctx, collectionName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollectionWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).DeleteCollectionWithResponse), varargs...)
}

// DeleteConversationModel mocks base method.
func (m *MockAPIClientInterface) DeleteConversationModel(ctx context.Context, modelId string, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, modelId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConversationModel", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConversationModel indicates an expected call of DeleteConversationModel.
func (mr *MockAPIClientInterfaceMockRecorder) DeleteConversationModel(ctx, modelId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, modelId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConversationModel", reflect.TypeOf((*MockAPIClientInterface)(nil).DeleteConversationModel), varargs...)
}

// DeleteConversationModelWithResponse mocks base method.
func (m *MockAPIClientInterface) DeleteConversationModelWithResponse(ctx context.Context, modelId string, reqEditors ...api.RequestEditorFn) (*api.DeleteConversationModelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, modelId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConversationModelWithResponse", varargs...)
	ret0, _ := ret[0].(*api.DeleteConversationModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConversationModelWithResponse indicates an expected call of DeleteConversationModelWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) DeleteConversationModelWithResponse(ctx, modelId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, modelId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConversationModelWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).DeleteConversationModelWithResponse), varargs...)
}

// DeleteDocument mocks base method.
func (m *MockAPIClientInterface) DeleteDocument(ctx context.Context, collectionName, documentId string, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, documentId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDocument", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDocument indicates an expected call of DeleteDocument.
func (mr *MockAPIClientInterfaceMockRecorder) DeleteDocument(ctx, collectionName, documentId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, documentId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDocument", reflect.TypeOf((*MockAPIClientInterface)(nil).DeleteDocument), varargs...)
}

// DeleteDocumentWithResponse mocks base method.
func (m *MockAPIClientInterface) DeleteDocumentWithResponse(ctx context.Context, collectionName, documentId string, reqEditors ...api.RequestEditorFn) (*api.DeleteDocumentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, documentId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDocumentWithResponse", varargs...)
	ret0, _ := ret[0].(*api.DeleteDocumentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDocumentWithResponse indicates an expected call of DeleteDocumentWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) DeleteDocumentWithResponse(ctx, collectionName, documentId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, documentId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDocumentWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).DeleteDocumentWithResponse), varargs...)
}

// DeleteDocuments mocks base method.
func (m *MockAPIClientInterface) DeleteDocuments(ctx context.Context, collectionName string, params *api.DeleteDocumentsParams, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDocuments", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDocuments indicates an expected call of DeleteDocuments.
func (mr *MockAPIClientInterfaceMockRecorder) DeleteDocuments(ctx, collectionName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDocuments", reflect.TypeOf((*MockAPIClientInterface)(nil).DeleteDocuments), varargs...)
}

// DeleteDocumentsWithResponse mocks base method.
func (m *MockAPIClientInterface) DeleteDocumentsWithResponse(ctx context.Context, collectionName string, params *api.DeleteDocumentsParams, reqEditors ...api.RequestEditorFn) (*api.DeleteDocumentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDocumentsWithResponse", varargs...)
	ret0, _ := ret[0].(*api.DeleteDocumentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDocumentsWithResponse indicates an expected call of DeleteDocumentsWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) DeleteDocumentsWithResponse(ctx, collectionName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDocumentsWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).DeleteDocumentsWithResponse), varargs...)
}

// DeleteKey mocks base method.
func (m *MockAPIClientInterface) DeleteKey(ctx context.Context, keyId int64, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, keyId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteKey", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKey indicates an expected call of DeleteKey.
func (mr *MockAPIClientInterfaceMockRecorder) DeleteKey(ctx, keyId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, keyId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKey", reflect.TypeOf((*MockAPIClientInterface)(nil).DeleteKey), varargs...)
}

// DeleteKeyWithResponse mocks base method.
func (m *MockAPIClientInterface) DeleteKeyWithResponse(ctx context.Context, keyId int64, reqEditors ...api.RequestEditorFn) (*api.DeleteKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, keyId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteKeyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.DeleteKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKeyWithResponse indicates an expected call of DeleteKeyWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) DeleteKeyWithResponse(ctx, keyId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, keyId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).DeleteKeyWithResponse), varargs...)
}

// DeletePreset mocks base method.
func (m *MockAPIClientInterface) DeletePreset(ctx context.Context, presetId string, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, presetId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePreset", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePreset indicates an expected call of DeletePreset.
func (mr *MockAPIClientInterfaceMockRecorder) DeletePreset(ctx, presetId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, presetId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePreset", reflect.TypeOf((*MockAPIClientInterface)(nil).DeletePreset), varargs...)
}

// DeletePresetWithResponse mocks base method.
func (m *MockAPIClientInterface) DeletePresetWithResponse(ctx context.Context, presetId string, reqEditors ...api.RequestEditorFn) (*api.DeletePresetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, presetId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePresetWithResponse", varargs...)
	ret0, _ := ret[0].(*api.DeletePresetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePresetWithResponse indicates an expected call of DeletePresetWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) DeletePresetWithResponse(ctx, presetId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, presetId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePresetWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).DeletePresetWithResponse), varargs...)
}

// DeleteSearchOverride mocks base method.
func (m *MockAPIClientInterface) DeleteSearchOverride(ctx context.Context, collectionName, overrideId string, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, overrideId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSearchOverride", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSearchOverride indicates an expected call of DeleteSearchOverride.
func (mr *MockAPIClientInterfaceMockRecorder) DeleteSearchOverride(ctx, collectionName, overrideId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, overrideId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSearchOverride", reflect.TypeOf((*MockAPIClientInterface)(nil).DeleteSearchOverride), varargs...)
}

// DeleteSearchOverrideWithResponse mocks base method.
func (m *MockAPIClientInterface) DeleteSearchOverrideWithResponse(ctx context.Context, collectionName, overrideId string, reqEditors ...api.RequestEditorFn) (*api.DeleteSearchOverrideResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, overrideId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSearchOverrideWithResponse", varargs...)
	ret0, _ := ret[0].(*api.DeleteSearchOverrideResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSearchOverrideWithResponse indicates an expected call of DeleteSearchOverrideWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) DeleteSearchOverrideWithResponse(ctx, collectionName, overrideId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, overrideId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSearchOverrideWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).DeleteSearchOverrideWithResponse), varargs...)
}

// DeleteSearchSynonym mocks base method.
func (m *MockAPIClientInterface) DeleteSearchSynonym(ctx context.Context, collectionName, synonymId string, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, synonymId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSearchSynonym", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSearchSynonym indicates an expected call of DeleteSearchSynonym.
func (mr *MockAPIClientInterfaceMockRecorder) DeleteSearchSynonym(ctx, collectionName, synonymId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, synonymId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSearchSynonym", reflect.TypeOf((*MockAPIClientInterface)(nil).DeleteSearchSynonym), varargs...)
}

// DeleteSearchSynonymWithResponse mocks base method.
func (m *MockAPIClientInterface) DeleteSearchSynonymWithResponse(ctx context.Context, collectionName, synonymId string, reqEditors ...api.RequestEditorFn) (*api.DeleteSearchSynonymResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, synonymId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSearchSynonymWithResponse", varargs...)
	ret0, _ := ret[0].(*api.DeleteSearchSynonymResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSearchSynonymWithResponse indicates an expected call of DeleteSearchSynonymWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) DeleteSearchSynonymWithResponse(ctx, collectionName, synonymId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, synonymId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSearchSynonymWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).DeleteSearchSynonymWithResponse), varargs...)
}

// DeleteStopwordsSet mocks base method.
func (m *MockAPIClientInterface) DeleteStopwordsSet(ctx context.Context, setId string, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, setId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStopwordsSet", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStopwordsSet indicates an expected call of DeleteStopwordsSet.
func (mr *MockAPIClientInterfaceMockRecorder) DeleteStopwordsSet(ctx, setId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, setId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStopwordsSet", reflect.TypeOf((*MockAPIClientInterface)(nil).DeleteStopwordsSet), varargs...)
}

// DeleteStopwordsSetWithResponse mocks base method.
func (m *MockAPIClientInterface) DeleteStopwordsSetWithResponse(ctx context.Context, setId string, reqEditors ...api.RequestEditorFn) (*api.DeleteStopwordsSetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, setId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStopwordsSetWithResponse", varargs...)
	ret0, _ := ret[0].(*api.DeleteStopwordsSetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStopwordsSetWithResponse indicates an expected call of DeleteStopwordsSetWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) DeleteStopwordsSetWithResponse(ctx, setId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, setId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStopwordsSetWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).DeleteStopwordsSetWithResponse), varargs...)
}

// ExportDocuments mocks base method.
func (m *MockAPIClientInterface) ExportDocuments(ctx context.Context, collectionName string, params *api.ExportDocumentsParams, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExportDocuments", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportDocuments indicates an expected call of ExportDocuments.
func (mr *MockAPIClientInterfaceMockRecorder) ExportDocuments(ctx, collectionName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportDocuments", reflect.TypeOf((*MockAPIClientInterface)(nil).ExportDocuments), varargs...)
}

// ExportDocumentsWithResponse mocks base method.
func (m *MockAPIClientInterface) ExportDocumentsWithResponse(ctx context.Context, collectionName string, params *api.ExportDocumentsParams, reqEditors ...api.RequestEditorFn) (*api.ExportDocumentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExportDocumentsWithResponse", varargs...)
	ret0, _ := ret[0].(*api.ExportDocumentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportDocumentsWithResponse indicates an expected call of ExportDocumentsWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) ExportDocumentsWithResponse(ctx, collectionName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportDocumentsWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).ExportDocumentsWithResponse), varargs...)
}

// GetAlias mocks base method.
func (m *MockAPIClientInterface) GetAlias(ctx context.Context, aliasName string, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, aliasName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAlias", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlias indicates an expected call of GetAlias.
func (mr *MockAPIClientInterfaceMockRecorder) GetAlias(ctx, aliasName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, aliasName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlias", reflect.TypeOf((*MockAPIClientInterface)(nil).GetAlias), varargs...)
}

// GetAliasWithResponse mocks base method.
func (m *MockAPIClientInterface) GetAliasWithResponse(ctx context.Context, aliasName string, reqEditors ...api.RequestEditorFn) (*api.GetAliasResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, aliasName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAliasWithResponse", varargs...)
	ret0, _ := ret[0].(*api.GetAliasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAliasWithResponse indicates an expected call of GetAliasWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) GetAliasWithResponse(ctx, aliasName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, aliasName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAliasWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).GetAliasWithResponse), varargs...)
}

// GetAliases mocks base method.
func (m *MockAPIClientInterface) GetAliases(ctx context.Context, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAliases", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAliases indicates an expected call of GetAliases.
func (mr *MockAPIClientInterfaceMockRecorder) GetAliases(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAliases", reflect.TypeOf((*MockAPIClientInterface)(nil).GetAliases), varargs...)
}

// GetAliasesWithResponse mocks base method.
func (m *MockAPIClientInterface) GetAliasesWithResponse(ctx context.Context, reqEditors ...api.RequestEditorFn) (*api.GetAliasesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAliasesWithResponse", varargs...)
	ret0, _ := ret[0].(*api.GetAliasesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAliasesWithResponse indicates an expected call of GetAliasesWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) GetAliasesWithResponse(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAliasesWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).GetAliasesWithResponse), varargs...)
}

// GetCollection mocks base method.
func (m *MockAPIClientInterface) GetCollection(ctx context.Context, collectionName string, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCollection", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollection indicates an expected call of GetCollection.
func (mr *MockAPIClientInterfaceMockRecorder) GetCollection(ctx, collectionName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollection", reflect.TypeOf((*MockAPIClientInterface)(nil).GetCollection), varargs...)
}

// GetCollectionWithResponse mocks base method.
func (m *MockAPIClientInterface) GetCollectionWithResponse(ctx context.Context, collectionName string, reqEditors ...api.RequestEditorFn) (*api.GetCollectionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCollectionWithResponse", varargs...)
	ret0, _ := ret[0].(*api.GetCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionWithResponse indicates an expected call of GetCollectionWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) GetCollectionWithResponse(ctx, collectionName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).GetCollectionWithResponse), varargs...)
}

// GetCollections mocks base method.
func (m *MockAPIClientInterface) GetCollections(ctx context.Context, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCollections", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollections indicates an expected call of GetCollections.
func (mr *MockAPIClientInterfaceMockRecorder) GetCollections(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollections", reflect.TypeOf((*MockAPIClientInterface)(nil).GetCollections), varargs...)
}

// GetCollectionsWithResponse mocks base method.
func (m *MockAPIClientInterface) GetCollectionsWithResponse(ctx context.Context, reqEditors ...api.RequestEditorFn) (*api.GetCollectionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCollectionsWithResponse", varargs...)
	ret0, _ := ret[0].(*api.GetCollectionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionsWithResponse indicates an expected call of GetCollectionsWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) GetCollectionsWithResponse(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionsWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).GetCollectionsWithResponse), varargs...)
}

// GetDocument mocks base method.
func (m *MockAPIClientInterface) GetDocument(ctx context.Context, collectionName, documentId string, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, documentId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDocument", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocument indicates an expected call of GetDocument.
func (mr *MockAPIClientInterfaceMockRecorder) GetDocument(ctx, collectionName, documentId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, documentId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocument", reflect.TypeOf((*MockAPIClientInterface)(nil).GetDocument), varargs...)
}

// GetDocumentWithResponse mocks base method.
func (m *MockAPIClientInterface) GetDocumentWithResponse(ctx context.Context, collectionName, documentId string, reqEditors ...api.RequestEditorFn) (*api.GetDocumentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, documentId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDocumentWithResponse", varargs...)
	ret0, _ := ret[0].(*api.GetDocumentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentWithResponse indicates an expected call of GetDocumentWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) GetDocumentWithResponse(ctx, collectionName, documentId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, documentId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).GetDocumentWithResponse), varargs...)
}

// GetKey mocks base method.
func (m *MockAPIClientInterface) GetKey(ctx context.Context, keyId int64, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, keyId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKey", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKey indicates an expected call of GetKey.
func (mr *MockAPIClientInterfaceMockRecorder) GetKey(ctx, keyId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, keyId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockAPIClientInterface)(nil).GetKey), varargs...)
}

// GetKeyWithResponse mocks base method.
func (m *MockAPIClientInterface) GetKeyWithResponse(ctx context.Context, keyId int64, reqEditors ...api.RequestEditorFn) (*api.GetKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, keyId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKeyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.GetKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyWithResponse indicates an expected call of GetKeyWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) GetKeyWithResponse(ctx, keyId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, keyId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).GetKeyWithResponse), varargs...)
}

// GetKeys mocks base method.
func (m *MockAPIClientInterface) GetKeys(ctx context.Context, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKeys", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeys indicates an expected call of GetKeys.
func (mr *MockAPIClientInterfaceMockRecorder) GetKeys(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeys", reflect.TypeOf((*MockAPIClientInterface)(nil).GetKeys), varargs...)
}

// GetKeysWithResponse mocks base method.
func (m *MockAPIClientInterface) GetKeysWithResponse(ctx context.Context, reqEditors ...api.RequestEditorFn) (*api.GetKeysResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKeysWithResponse", varargs...)
	ret0, _ := ret[0].(*api.GetKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeysWithResponse indicates an expected call of GetKeysWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) GetKeysWithResponse(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeysWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).GetKeysWithResponse), varargs...)
}

// GetSearchOverride mocks base method.
func (m *MockAPIClientInterface) GetSearchOverride(ctx context.Context, collectionName, overrideId string, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, overrideId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSearchOverride", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchOverride indicates an expected call of GetSearchOverride.
func (mr *MockAPIClientInterfaceMockRecorder) GetSearchOverride(ctx, collectionName, overrideId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, overrideId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchOverride", reflect.TypeOf((*MockAPIClientInterface)(nil).GetSearchOverride), varargs...)
}

// GetSearchOverrideWithResponse mocks base method.
func (m *MockAPIClientInterface) GetSearchOverrideWithResponse(ctx context.Context, collectionName, overrideId string, reqEditors ...api.RequestEditorFn) (*api.GetSearchOverrideResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, overrideId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSearchOverrideWithResponse", varargs...)
	ret0, _ := ret[0].(*api.GetSearchOverrideResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchOverrideWithResponse indicates an expected call of GetSearchOverrideWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) GetSearchOverrideWithResponse(ctx, collectionName, overrideId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, overrideId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchOverrideWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).GetSearchOverrideWithResponse), varargs...)
}

// GetSearchOverrides mocks base method.
func (m *MockAPIClientInterface) GetSearchOverrides(ctx context.Context, collectionName string, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSearchOverrides", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchOverrides indicates an expected call of GetSearchOverrides.
func (mr *MockAPIClientInterfaceMockRecorder) GetSearchOverrides(ctx, collectionName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchOverrides", reflect.TypeOf((*MockAPIClientInterface)(nil).GetSearchOverrides), varargs...)
}

// GetSearchOverridesWithResponse mocks base method.
func (m *MockAPIClientInterface) GetSearchOverridesWithResponse(ctx context.Context, collectionName string, reqEditors ...api.RequestEditorFn) (*api.GetSearchOverridesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSearchOverridesWithResponse", varargs...)
	ret0, _ := ret[0].(*api.GetSearchOverridesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchOverridesWithResponse indicates an expected call of GetSearchOverridesWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) GetSearchOverridesWithResponse(ctx, collectionName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchOverridesWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).GetSearchOverridesWithResponse), varargs...)
}

// GetSearchSynonym mocks base method.
func (m *MockAPIClientInterface) GetSearchSynonym(ctx context.Context, collectionName, synonymId string, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, synonymId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSearchSynonym", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchSynonym indicates an expected call of GetSearchSynonym.
func (mr *MockAPIClientInterfaceMockRecorder) GetSearchSynonym(ctx, collectionName, synonymId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, synonymId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchSynonym", reflect.TypeOf((*MockAPIClientInterface)(nil).GetSearchSynonym), varargs...)
}

// GetSearchSynonymWithResponse mocks base method.
func (m *MockAPIClientInterface) GetSearchSynonymWithResponse(ctx context.Context, collectionName, synonymId string, reqEditors ...api.RequestEditorFn) (*api.GetSearchSynonymResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, synonymId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSearchSynonymWithResponse", varargs...)
	ret0, _ := ret[0].(*api.GetSearchSynonymResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchSynonymWithResponse indicates an expected call of GetSearchSynonymWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) GetSearchSynonymWithResponse(ctx, collectionName, synonymId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, synonymId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchSynonymWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).GetSearchSynonymWithResponse), varargs...)
}

// GetSearchSynonyms mocks base method.
func (m *MockAPIClientInterface) GetSearchSynonyms(ctx context.Context, collectionName string, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSearchSynonyms", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchSynonyms indicates an expected call of GetSearchSynonyms.
func (mr *MockAPIClientInterfaceMockRecorder) GetSearchSynonyms(ctx, collectionName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchSynonyms", reflect.TypeOf((*MockAPIClientInterface)(nil).GetSearchSynonyms), varargs...)
}

// GetSearchSynonymsWithResponse mocks base method.
func (m *MockAPIClientInterface) GetSearchSynonymsWithResponse(ctx context.Context, collectionName string, reqEditors ...api.RequestEditorFn) (*api.GetSearchSynonymsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSearchSynonymsWithResponse", varargs...)
	ret0, _ := ret[0].(*api.GetSearchSynonymsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchSynonymsWithResponse indicates an expected call of GetSearchSynonymsWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) GetSearchSynonymsWithResponse(ctx, collectionName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchSynonymsWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).GetSearchSynonymsWithResponse), varargs...)
}

// Health mocks base method.
func (m *MockAPIClientInterface) Health(ctx context.Context, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Health", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health.
func (mr *MockAPIClientInterfaceMockRecorder) Health(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockAPIClientInterface)(nil).Health), varargs...)
}

// HealthWithResponse mocks base method.
func (m *MockAPIClientInterface) HealthWithResponse(ctx context.Context, reqEditors ...api.RequestEditorFn) (*api.HealthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HealthWithResponse", varargs...)
	ret0, _ := ret[0].(*api.HealthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthWithResponse indicates an expected call of HealthWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) HealthWithResponse(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).HealthWithResponse), varargs...)
}

// ImportDocumentsWithBody mocks base method.
func (m *MockAPIClientInterface) ImportDocumentsWithBody(ctx context.Context, collectionName string, params *api.ImportDocumentsParams, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportDocumentsWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportDocumentsWithBody indicates an expected call of ImportDocumentsWithBody.
func (mr *MockAPIClientInterfaceMockRecorder) ImportDocumentsWithBody(ctx, collectionName, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportDocumentsWithBody", reflect.TypeOf((*MockAPIClientInterface)(nil).ImportDocumentsWithBody), varargs...)
}

// ImportDocumentsWithBodyWithResponse mocks base method.
func (m *MockAPIClientInterface) ImportDocumentsWithBodyWithResponse(ctx context.Context, collectionName string, params *api.ImportDocumentsParams, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.ImportDocumentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportDocumentsWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.ImportDocumentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportDocumentsWithBodyWithResponse indicates an expected call of ImportDocumentsWithBodyWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) ImportDocumentsWithBodyWithResponse(ctx, collectionName, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportDocumentsWithBodyWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).ImportDocumentsWithBodyWithResponse), varargs...)
}

// IndexDocument mocks base method.
func (m *MockAPIClientInterface) IndexDocument(ctx context.Context, collectionName string, params *api.IndexDocumentParams, body api.IndexDocumentJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IndexDocument", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexDocument indicates an expected call of IndexDocument.
func (mr *MockAPIClientInterfaceMockRecorder) IndexDocument(ctx, collectionName, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexDocument", reflect.TypeOf((*MockAPIClientInterface)(nil).IndexDocument), varargs...)
}

// IndexDocumentWithBody mocks base method.
func (m *MockAPIClientInterface) IndexDocumentWithBody(ctx context.Context, collectionName string, params *api.IndexDocumentParams, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IndexDocumentWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexDocumentWithBody indicates an expected call of IndexDocumentWithBody.
func (mr *MockAPIClientInterfaceMockRecorder) IndexDocumentWithBody(ctx, collectionName, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexDocumentWithBody", reflect.TypeOf((*MockAPIClientInterface)(nil).IndexDocumentWithBody), varargs...)
}

// IndexDocumentWithBodyWithResponse mocks base method.
func (m *MockAPIClientInterface) IndexDocumentWithBodyWithResponse(ctx context.Context, collectionName string, params *api.IndexDocumentParams, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.IndexDocumentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IndexDocumentWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.IndexDocumentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexDocumentWithBodyWithResponse indicates an expected call of IndexDocumentWithBodyWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) IndexDocumentWithBodyWithResponse(ctx, collectionName, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexDocumentWithBodyWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).IndexDocumentWithBodyWithResponse), varargs...)
}

// IndexDocumentWithResponse mocks base method.
func (m *MockAPIClientInterface) IndexDocumentWithResponse(ctx context.Context, collectionName string, params *api.IndexDocumentParams, body api.IndexDocumentJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.IndexDocumentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IndexDocumentWithResponse", varargs...)
	ret0, _ := ret[0].(*api.IndexDocumentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexDocumentWithResponse indicates an expected call of IndexDocumentWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) IndexDocumentWithResponse(ctx, collectionName, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexDocumentWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).IndexDocumentWithResponse), varargs...)
}

// MultiSearch mocks base method.
func (m *MockAPIClientInterface) MultiSearch(ctx context.Context, params *api.MultiSearchParams, body api.MultiSearchJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MultiSearch", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiSearch indicates an expected call of MultiSearch.
func (mr *MockAPIClientInterfaceMockRecorder) MultiSearch(ctx, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiSearch", reflect.TypeOf((*MockAPIClientInterface)(nil).MultiSearch), varargs...)
}

// MultiSearchWithBody mocks base method.
func (m *MockAPIClientInterface) MultiSearchWithBody(ctx context.Context, params *api.MultiSearchParams, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MultiSearchWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiSearchWithBody indicates an expected call of MultiSearchWithBody.
func (mr *MockAPIClientInterfaceMockRecorder) MultiSearchWithBody(ctx, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiSearchWithBody", reflect.TypeOf((*MockAPIClientInterface)(nil).MultiSearchWithBody), varargs...)
}

// MultiSearchWithBodyWithResponse mocks base method.
func (m *MockAPIClientInterface) MultiSearchWithBodyWithResponse(ctx context.Context, params *api.MultiSearchParams, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.MultiSearchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MultiSearchWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.MultiSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiSearchWithBodyWithResponse indicates an expected call of MultiSearchWithBodyWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) MultiSearchWithBodyWithResponse(ctx, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiSearchWithBodyWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).MultiSearchWithBodyWithResponse), varargs...)
}

// MultiSearchWithResponse mocks base method.
func (m *MockAPIClientInterface) MultiSearchWithResponse(ctx context.Context, params *api.MultiSearchParams, body api.MultiSearchJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.MultiSearchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MultiSearchWithResponse", varargs...)
	ret0, _ := ret[0].(*api.MultiSearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiSearchWithResponse indicates an expected call of MultiSearchWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) MultiSearchWithResponse(ctx, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiSearchWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).MultiSearchWithResponse), varargs...)
}

// RetrieveAPIStats mocks base method.
func (m *MockAPIClientInterface) RetrieveAPIStats(ctx context.Context, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveAPIStats", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAPIStats indicates an expected call of RetrieveAPIStats.
func (mr *MockAPIClientInterfaceMockRecorder) RetrieveAPIStats(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAPIStats", reflect.TypeOf((*MockAPIClientInterface)(nil).RetrieveAPIStats), varargs...)
}

// RetrieveAPIStatsWithResponse mocks base method.
func (m *MockAPIClientInterface) RetrieveAPIStatsWithResponse(ctx context.Context, reqEditors ...api.RequestEditorFn) (*api.RetrieveAPIStatsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveAPIStatsWithResponse", varargs...)
	ret0, _ := ret[0].(*api.RetrieveAPIStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAPIStatsWithResponse indicates an expected call of RetrieveAPIStatsWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) RetrieveAPIStatsWithResponse(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAPIStatsWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).RetrieveAPIStatsWithResponse), varargs...)
}

// RetrieveAllConversationModels mocks base method.
func (m *MockAPIClientInterface) RetrieveAllConversationModels(ctx context.Context, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveAllConversationModels", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAllConversationModels indicates an expected call of RetrieveAllConversationModels.
func (mr *MockAPIClientInterfaceMockRecorder) RetrieveAllConversationModels(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAllConversationModels", reflect.TypeOf((*MockAPIClientInterface)(nil).RetrieveAllConversationModels), varargs...)
}

// RetrieveAllConversationModelsWithResponse mocks base method.
func (m *MockAPIClientInterface) RetrieveAllConversationModelsWithResponse(ctx context.Context, reqEditors ...api.RequestEditorFn) (*api.RetrieveAllConversationModelsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveAllConversationModelsWithResponse", varargs...)
	ret0, _ := ret[0].(*api.RetrieveAllConversationModelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAllConversationModelsWithResponse indicates an expected call of RetrieveAllConversationModelsWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) RetrieveAllConversationModelsWithResponse(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAllConversationModelsWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).RetrieveAllConversationModelsWithResponse), varargs...)
}

// RetrieveAllPresets mocks base method.
func (m *MockAPIClientInterface) RetrieveAllPresets(ctx context.Context, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveAllPresets", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAllPresets indicates an expected call of RetrieveAllPresets.
func (mr *MockAPIClientInterfaceMockRecorder) RetrieveAllPresets(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAllPresets", reflect.TypeOf((*MockAPIClientInterface)(nil).RetrieveAllPresets), varargs...)
}

// RetrieveAllPresetsWithResponse mocks base method.
func (m *MockAPIClientInterface) RetrieveAllPresetsWithResponse(ctx context.Context, reqEditors ...api.RequestEditorFn) (*api.RetrieveAllPresetsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveAllPresetsWithResponse", varargs...)
	ret0, _ := ret[0].(*api.RetrieveAllPresetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAllPresetsWithResponse indicates an expected call of RetrieveAllPresetsWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) RetrieveAllPresetsWithResponse(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAllPresetsWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).RetrieveAllPresetsWithResponse), varargs...)
}

// RetrieveAnalyticsRule mocks base method.
func (m *MockAPIClientInterface) RetrieveAnalyticsRule(ctx context.Context, ruleName string, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, ruleName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveAnalyticsRule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAnalyticsRule indicates an expected call of RetrieveAnalyticsRule.
func (mr *MockAPIClientInterfaceMockRecorder) RetrieveAnalyticsRule(ctx, ruleName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, ruleName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAnalyticsRule", reflect.TypeOf((*MockAPIClientInterface)(nil).RetrieveAnalyticsRule), varargs...)
}

// RetrieveAnalyticsRuleWithResponse mocks base method.
func (m *MockAPIClientInterface) RetrieveAnalyticsRuleWithResponse(ctx context.Context, ruleName string, reqEditors ...api.RequestEditorFn) (*api.RetrieveAnalyticsRuleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, ruleName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveAnalyticsRuleWithResponse", varargs...)
	ret0, _ := ret[0].(*api.RetrieveAnalyticsRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAnalyticsRuleWithResponse indicates an expected call of RetrieveAnalyticsRuleWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) RetrieveAnalyticsRuleWithResponse(ctx, ruleName any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, ruleName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAnalyticsRuleWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).RetrieveAnalyticsRuleWithResponse), varargs...)
}

// RetrieveAnalyticsRules mocks base method.
func (m *MockAPIClientInterface) RetrieveAnalyticsRules(ctx context.Context, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveAnalyticsRules", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAnalyticsRules indicates an expected call of RetrieveAnalyticsRules.
func (mr *MockAPIClientInterfaceMockRecorder) RetrieveAnalyticsRules(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAnalyticsRules", reflect.TypeOf((*MockAPIClientInterface)(nil).RetrieveAnalyticsRules), varargs...)
}

// RetrieveAnalyticsRulesWithResponse mocks base method.
func (m *MockAPIClientInterface) RetrieveAnalyticsRulesWithResponse(ctx context.Context, reqEditors ...api.RequestEditorFn) (*api.RetrieveAnalyticsRulesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveAnalyticsRulesWithResponse", varargs...)
	ret0, _ := ret[0].(*api.RetrieveAnalyticsRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAnalyticsRulesWithResponse indicates an expected call of RetrieveAnalyticsRulesWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) RetrieveAnalyticsRulesWithResponse(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAnalyticsRulesWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).RetrieveAnalyticsRulesWithResponse), varargs...)
}

// RetrieveConversationModel mocks base method.
func (m *MockAPIClientInterface) RetrieveConversationModel(ctx context.Context, modelId string, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, modelId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveConversationModel", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveConversationModel indicates an expected call of RetrieveConversationModel.
func (mr *MockAPIClientInterfaceMockRecorder) RetrieveConversationModel(ctx, modelId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, modelId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveConversationModel", reflect.TypeOf((*MockAPIClientInterface)(nil).RetrieveConversationModel), varargs...)
}

// RetrieveConversationModelWithResponse mocks base method.
func (m *MockAPIClientInterface) RetrieveConversationModelWithResponse(ctx context.Context, modelId string, reqEditors ...api.RequestEditorFn) (*api.RetrieveConversationModelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, modelId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveConversationModelWithResponse", varargs...)
	ret0, _ := ret[0].(*api.RetrieveConversationModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveConversationModelWithResponse indicates an expected call of RetrieveConversationModelWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) RetrieveConversationModelWithResponse(ctx, modelId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, modelId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveConversationModelWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).RetrieveConversationModelWithResponse), varargs...)
}

// RetrieveMetrics mocks base method.
func (m *MockAPIClientInterface) RetrieveMetrics(ctx context.Context, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveMetrics", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveMetrics indicates an expected call of RetrieveMetrics.
func (mr *MockAPIClientInterfaceMockRecorder) RetrieveMetrics(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveMetrics", reflect.TypeOf((*MockAPIClientInterface)(nil).RetrieveMetrics), varargs...)
}

// RetrieveMetricsWithResponse mocks base method.
func (m *MockAPIClientInterface) RetrieveMetricsWithResponse(ctx context.Context, reqEditors ...api.RequestEditorFn) (*api.RetrieveMetricsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveMetricsWithResponse", varargs...)
	ret0, _ := ret[0].(*api.RetrieveMetricsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveMetricsWithResponse indicates an expected call of RetrieveMetricsWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) RetrieveMetricsWithResponse(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveMetricsWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).RetrieveMetricsWithResponse), varargs...)
}

// RetrievePreset mocks base method.
func (m *MockAPIClientInterface) RetrievePreset(ctx context.Context, presetId string, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, presetId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrievePreset", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrievePreset indicates an expected call of RetrievePreset.
func (mr *MockAPIClientInterfaceMockRecorder) RetrievePreset(ctx, presetId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, presetId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrievePreset", reflect.TypeOf((*MockAPIClientInterface)(nil).RetrievePreset), varargs...)
}

// RetrievePresetWithResponse mocks base method.
func (m *MockAPIClientInterface) RetrievePresetWithResponse(ctx context.Context, presetId string, reqEditors ...api.RequestEditorFn) (*api.RetrievePresetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, presetId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrievePresetWithResponse", varargs...)
	ret0, _ := ret[0].(*api.RetrievePresetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrievePresetWithResponse indicates an expected call of RetrievePresetWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) RetrievePresetWithResponse(ctx, presetId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, presetId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrievePresetWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).RetrievePresetWithResponse), varargs...)
}

// RetrieveStopwordsSet mocks base method.
func (m *MockAPIClientInterface) RetrieveStopwordsSet(ctx context.Context, setId string, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, setId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveStopwordsSet", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveStopwordsSet indicates an expected call of RetrieveStopwordsSet.
func (mr *MockAPIClientInterfaceMockRecorder) RetrieveStopwordsSet(ctx, setId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, setId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveStopwordsSet", reflect.TypeOf((*MockAPIClientInterface)(nil).RetrieveStopwordsSet), varargs...)
}

// RetrieveStopwordsSetWithResponse mocks base method.
func (m *MockAPIClientInterface) RetrieveStopwordsSetWithResponse(ctx context.Context, setId string, reqEditors ...api.RequestEditorFn) (*api.RetrieveStopwordsSetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, setId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveStopwordsSetWithResponse", varargs...)
	ret0, _ := ret[0].(*api.RetrieveStopwordsSetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveStopwordsSetWithResponse indicates an expected call of RetrieveStopwordsSetWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) RetrieveStopwordsSetWithResponse(ctx, setId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, setId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveStopwordsSetWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).RetrieveStopwordsSetWithResponse), varargs...)
}

// RetrieveStopwordsSets mocks base method.
func (m *MockAPIClientInterface) RetrieveStopwordsSets(ctx context.Context, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveStopwordsSets", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveStopwordsSets indicates an expected call of RetrieveStopwordsSets.
func (mr *MockAPIClientInterfaceMockRecorder) RetrieveStopwordsSets(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveStopwordsSets", reflect.TypeOf((*MockAPIClientInterface)(nil).RetrieveStopwordsSets), varargs...)
}

// RetrieveStopwordsSetsWithResponse mocks base method.
func (m *MockAPIClientInterface) RetrieveStopwordsSetsWithResponse(ctx context.Context, reqEditors ...api.RequestEditorFn) (*api.RetrieveStopwordsSetsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveStopwordsSetsWithResponse", varargs...)
	ret0, _ := ret[0].(*api.RetrieveStopwordsSetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveStopwordsSetsWithResponse indicates an expected call of RetrieveStopwordsSetsWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) RetrieveStopwordsSetsWithResponse(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveStopwordsSetsWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).RetrieveStopwordsSetsWithResponse), varargs...)
}

// SearchCollection mocks base method.
func (m *MockAPIClientInterface) SearchCollection(ctx context.Context, collectionName string, params *api.SearchCollectionParams, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchCollection", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCollection indicates an expected call of SearchCollection.
func (mr *MockAPIClientInterfaceMockRecorder) SearchCollection(ctx, collectionName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCollection", reflect.TypeOf((*MockAPIClientInterface)(nil).SearchCollection), varargs...)
}

// SearchCollectionWithResponse mocks base method.
func (m *MockAPIClientInterface) SearchCollectionWithResponse(ctx context.Context, collectionName string, params *api.SearchCollectionParams, reqEditors ...api.RequestEditorFn) (*api.SearchCollectionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchCollectionWithResponse", varargs...)
	ret0, _ := ret[0].(*api.SearchCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCollectionWithResponse indicates an expected call of SearchCollectionWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) SearchCollectionWithResponse(ctx, collectionName, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCollectionWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).SearchCollectionWithResponse), varargs...)
}

// TakeSnapshot mocks base method.
func (m *MockAPIClientInterface) TakeSnapshot(ctx context.Context, params *api.TakeSnapshotParams, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TakeSnapshot", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TakeSnapshot indicates an expected call of TakeSnapshot.
func (mr *MockAPIClientInterfaceMockRecorder) TakeSnapshot(ctx, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeSnapshot", reflect.TypeOf((*MockAPIClientInterface)(nil).TakeSnapshot), varargs...)
}

// TakeSnapshotWithResponse mocks base method.
func (m *MockAPIClientInterface) TakeSnapshotWithResponse(ctx context.Context, params *api.TakeSnapshotParams, reqEditors ...api.RequestEditorFn) (*api.TakeSnapshotResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TakeSnapshotWithResponse", varargs...)
	ret0, _ := ret[0].(*api.TakeSnapshotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TakeSnapshotWithResponse indicates an expected call of TakeSnapshotWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) TakeSnapshotWithResponse(ctx, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeSnapshotWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).TakeSnapshotWithResponse), varargs...)
}

// UpdateCollection mocks base method.
func (m *MockAPIClientInterface) UpdateCollection(ctx context.Context, collectionName string, body api.UpdateCollectionJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCollection", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCollection indicates an expected call of UpdateCollection.
func (mr *MockAPIClientInterfaceMockRecorder) UpdateCollection(ctx, collectionName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCollection", reflect.TypeOf((*MockAPIClientInterface)(nil).UpdateCollection), varargs...)
}

// UpdateCollectionWithBody mocks base method.
func (m *MockAPIClientInterface) UpdateCollectionWithBody(ctx context.Context, collectionName, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCollectionWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCollectionWithBody indicates an expected call of UpdateCollectionWithBody.
func (mr *MockAPIClientInterfaceMockRecorder) UpdateCollectionWithBody(ctx, collectionName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCollectionWithBody", reflect.TypeOf((*MockAPIClientInterface)(nil).UpdateCollectionWithBody), varargs...)
}

// UpdateCollectionWithBodyWithResponse mocks base method.
func (m *MockAPIClientInterface) UpdateCollectionWithBodyWithResponse(ctx context.Context, collectionName, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.UpdateCollectionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCollectionWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.UpdateCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCollectionWithBodyWithResponse indicates an expected call of UpdateCollectionWithBodyWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) UpdateCollectionWithBodyWithResponse(ctx, collectionName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCollectionWithBodyWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).UpdateCollectionWithBodyWithResponse), varargs...)
}

// UpdateCollectionWithResponse mocks base method.
func (m *MockAPIClientInterface) UpdateCollectionWithResponse(ctx context.Context, collectionName string, body api.UpdateCollectionJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.UpdateCollectionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCollectionWithResponse", varargs...)
	ret0, _ := ret[0].(*api.UpdateCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCollectionWithResponse indicates an expected call of UpdateCollectionWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) UpdateCollectionWithResponse(ctx, collectionName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCollectionWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).UpdateCollectionWithResponse), varargs...)
}

// UpdateConversationModel mocks base method.
func (m *MockAPIClientInterface) UpdateConversationModel(ctx context.Context, modelId string, body api.UpdateConversationModelJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, modelId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConversationModel", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConversationModel indicates an expected call of UpdateConversationModel.
func (mr *MockAPIClientInterfaceMockRecorder) UpdateConversationModel(ctx, modelId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, modelId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConversationModel", reflect.TypeOf((*MockAPIClientInterface)(nil).UpdateConversationModel), varargs...)
}

// UpdateConversationModelWithBody mocks base method.
func (m *MockAPIClientInterface) UpdateConversationModelWithBody(ctx context.Context, modelId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, modelId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConversationModelWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConversationModelWithBody indicates an expected call of UpdateConversationModelWithBody.
func (mr *MockAPIClientInterfaceMockRecorder) UpdateConversationModelWithBody(ctx, modelId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, modelId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConversationModelWithBody", reflect.TypeOf((*MockAPIClientInterface)(nil).UpdateConversationModelWithBody), varargs...)
}

// UpdateConversationModelWithBodyWithResponse mocks base method.
func (m *MockAPIClientInterface) UpdateConversationModelWithBodyWithResponse(ctx context.Context, modelId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.UpdateConversationModelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, modelId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConversationModelWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.UpdateConversationModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConversationModelWithBodyWithResponse indicates an expected call of UpdateConversationModelWithBodyWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) UpdateConversationModelWithBodyWithResponse(ctx, modelId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, modelId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConversationModelWithBodyWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).UpdateConversationModelWithBodyWithResponse), varargs...)
}

// UpdateConversationModelWithResponse mocks base method.
func (m *MockAPIClientInterface) UpdateConversationModelWithResponse(ctx context.Context, modelId string, body api.UpdateConversationModelJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.UpdateConversationModelResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, modelId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConversationModelWithResponse", varargs...)
	ret0, _ := ret[0].(*api.UpdateConversationModelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConversationModelWithResponse indicates an expected call of UpdateConversationModelWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) UpdateConversationModelWithResponse(ctx, modelId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, modelId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConversationModelWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).UpdateConversationModelWithResponse), varargs...)
}

// UpdateDocument mocks base method.
func (m *MockAPIClientInterface) UpdateDocument(ctx context.Context, collectionName, documentId string, params *api.UpdateDocumentParams, body api.UpdateDocumentJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, documentId, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDocument", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDocument indicates an expected call of UpdateDocument.
func (mr *MockAPIClientInterfaceMockRecorder) UpdateDocument(ctx, collectionName, documentId, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, documentId, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocument", reflect.TypeOf((*MockAPIClientInterface)(nil).UpdateDocument), varargs...)
}

// UpdateDocumentWithBody mocks base method.
func (m *MockAPIClientInterface) UpdateDocumentWithBody(ctx context.Context, collectionName, documentId string, params *api.UpdateDocumentParams, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, documentId, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDocumentWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDocumentWithBody indicates an expected call of UpdateDocumentWithBody.
func (mr *MockAPIClientInterfaceMockRecorder) UpdateDocumentWithBody(ctx, collectionName, documentId, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, documentId, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocumentWithBody", reflect.TypeOf((*MockAPIClientInterface)(nil).UpdateDocumentWithBody), varargs...)
}

// UpdateDocumentWithBodyWithResponse mocks base method.
func (m *MockAPIClientInterface) UpdateDocumentWithBodyWithResponse(ctx context.Context, collectionName, documentId string, params *api.UpdateDocumentParams, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.UpdateDocumentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, documentId, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDocumentWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.UpdateDocumentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDocumentWithBodyWithResponse indicates an expected call of UpdateDocumentWithBodyWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) UpdateDocumentWithBodyWithResponse(ctx, collectionName, documentId, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, documentId, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocumentWithBodyWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).UpdateDocumentWithBodyWithResponse), varargs...)
}

// UpdateDocumentWithResponse mocks base method.
func (m *MockAPIClientInterface) UpdateDocumentWithResponse(ctx context.Context, collectionName, documentId string, params *api.UpdateDocumentParams, body api.UpdateDocumentJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.UpdateDocumentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, documentId, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDocumentWithResponse", varargs...)
	ret0, _ := ret[0].(*api.UpdateDocumentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDocumentWithResponse indicates an expected call of UpdateDocumentWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) UpdateDocumentWithResponse(ctx, collectionName, documentId, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, documentId, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocumentWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).UpdateDocumentWithResponse), varargs...)
}

// UpdateDocuments mocks base method.
func (m *MockAPIClientInterface) UpdateDocuments(ctx context.Context, collectionName string, params *api.UpdateDocumentsParams, body api.UpdateDocumentsJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDocuments", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDocuments indicates an expected call of UpdateDocuments.
func (mr *MockAPIClientInterfaceMockRecorder) UpdateDocuments(ctx, collectionName, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocuments", reflect.TypeOf((*MockAPIClientInterface)(nil).UpdateDocuments), varargs...)
}

// UpdateDocumentsWithBody mocks base method.
func (m *MockAPIClientInterface) UpdateDocumentsWithBody(ctx context.Context, collectionName string, params *api.UpdateDocumentsParams, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDocumentsWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDocumentsWithBody indicates an expected call of UpdateDocumentsWithBody.
func (mr *MockAPIClientInterfaceMockRecorder) UpdateDocumentsWithBody(ctx, collectionName, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocumentsWithBody", reflect.TypeOf((*MockAPIClientInterface)(nil).UpdateDocumentsWithBody), varargs...)
}

// UpdateDocumentsWithBodyWithResponse mocks base method.
func (m *MockAPIClientInterface) UpdateDocumentsWithBodyWithResponse(ctx context.Context, collectionName string, params *api.UpdateDocumentsParams, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.UpdateDocumentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDocumentsWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.UpdateDocumentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDocumentsWithBodyWithResponse indicates an expected call of UpdateDocumentsWithBodyWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) UpdateDocumentsWithBodyWithResponse(ctx, collectionName, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocumentsWithBodyWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).UpdateDocumentsWithBodyWithResponse), varargs...)
}

// UpdateDocumentsWithResponse mocks base method.
func (m *MockAPIClientInterface) UpdateDocumentsWithResponse(ctx context.Context, collectionName string, params *api.UpdateDocumentsParams, body api.UpdateDocumentsJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.UpdateDocumentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDocumentsWithResponse", varargs...)
	ret0, _ := ret[0].(*api.UpdateDocumentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDocumentsWithResponse indicates an expected call of UpdateDocumentsWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) UpdateDocumentsWithResponse(ctx, collectionName, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocumentsWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).UpdateDocumentsWithResponse), varargs...)
}

// UpsertAlias mocks base method.
func (m *MockAPIClientInterface) UpsertAlias(ctx context.Context, aliasName string, body api.UpsertAliasJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, aliasName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertAlias", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAlias indicates an expected call of UpsertAlias.
func (mr *MockAPIClientInterfaceMockRecorder) UpsertAlias(ctx, aliasName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, aliasName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAlias", reflect.TypeOf((*MockAPIClientInterface)(nil).UpsertAlias), varargs...)
}

// UpsertAliasWithBody mocks base method.
func (m *MockAPIClientInterface) UpsertAliasWithBody(ctx context.Context, aliasName, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, aliasName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertAliasWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAliasWithBody indicates an expected call of UpsertAliasWithBody.
func (mr *MockAPIClientInterfaceMockRecorder) UpsertAliasWithBody(ctx, aliasName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, aliasName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAliasWithBody", reflect.TypeOf((*MockAPIClientInterface)(nil).UpsertAliasWithBody), varargs...)
}

// UpsertAliasWithBodyWithResponse mocks base method.
func (m *MockAPIClientInterface) UpsertAliasWithBodyWithResponse(ctx context.Context, aliasName, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.UpsertAliasResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, aliasName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertAliasWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.UpsertAliasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAliasWithBodyWithResponse indicates an expected call of UpsertAliasWithBodyWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) UpsertAliasWithBodyWithResponse(ctx, aliasName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, aliasName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAliasWithBodyWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).UpsertAliasWithBodyWithResponse), varargs...)
}

// UpsertAliasWithResponse mocks base method.
func (m *MockAPIClientInterface) UpsertAliasWithResponse(ctx context.Context, aliasName string, body api.UpsertAliasJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.UpsertAliasResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, aliasName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertAliasWithResponse", varargs...)
	ret0, _ := ret[0].(*api.UpsertAliasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAliasWithResponse indicates an expected call of UpsertAliasWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) UpsertAliasWithResponse(ctx, aliasName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, aliasName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAliasWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).UpsertAliasWithResponse), varargs...)
}

// UpsertAnalyticsRule mocks base method.
func (m *MockAPIClientInterface) UpsertAnalyticsRule(ctx context.Context, ruleName string, body api.UpsertAnalyticsRuleJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, ruleName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertAnalyticsRule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAnalyticsRule indicates an expected call of UpsertAnalyticsRule.
func (mr *MockAPIClientInterfaceMockRecorder) UpsertAnalyticsRule(ctx, ruleName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, ruleName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAnalyticsRule", reflect.TypeOf((*MockAPIClientInterface)(nil).UpsertAnalyticsRule), varargs...)
}

// UpsertAnalyticsRuleWithBody mocks base method.
func (m *MockAPIClientInterface) UpsertAnalyticsRuleWithBody(ctx context.Context, ruleName, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, ruleName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertAnalyticsRuleWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAnalyticsRuleWithBody indicates an expected call of UpsertAnalyticsRuleWithBody.
func (mr *MockAPIClientInterfaceMockRecorder) UpsertAnalyticsRuleWithBody(ctx, ruleName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, ruleName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAnalyticsRuleWithBody", reflect.TypeOf((*MockAPIClientInterface)(nil).UpsertAnalyticsRuleWithBody), varargs...)
}

// UpsertAnalyticsRuleWithBodyWithResponse mocks base method.
func (m *MockAPIClientInterface) UpsertAnalyticsRuleWithBodyWithResponse(ctx context.Context, ruleName, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.UpsertAnalyticsRuleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, ruleName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertAnalyticsRuleWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.UpsertAnalyticsRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAnalyticsRuleWithBodyWithResponse indicates an expected call of UpsertAnalyticsRuleWithBodyWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) UpsertAnalyticsRuleWithBodyWithResponse(ctx, ruleName, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, ruleName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAnalyticsRuleWithBodyWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).UpsertAnalyticsRuleWithBodyWithResponse), varargs...)
}

// UpsertAnalyticsRuleWithResponse mocks base method.
func (m *MockAPIClientInterface) UpsertAnalyticsRuleWithResponse(ctx context.Context, ruleName string, body api.UpsertAnalyticsRuleJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.UpsertAnalyticsRuleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, ruleName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertAnalyticsRuleWithResponse", varargs...)
	ret0, _ := ret[0].(*api.UpsertAnalyticsRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAnalyticsRuleWithResponse indicates an expected call of UpsertAnalyticsRuleWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) UpsertAnalyticsRuleWithResponse(ctx, ruleName, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, ruleName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAnalyticsRuleWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).UpsertAnalyticsRuleWithResponse), varargs...)
}

// UpsertPreset mocks base method.
func (m *MockAPIClientInterface) UpsertPreset(ctx context.Context, presetId string, body api.UpsertPresetJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, presetId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertPreset", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertPreset indicates an expected call of UpsertPreset.
func (mr *MockAPIClientInterfaceMockRecorder) UpsertPreset(ctx, presetId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, presetId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPreset", reflect.TypeOf((*MockAPIClientInterface)(nil).UpsertPreset), varargs...)
}

// UpsertPresetWithBody mocks base method.
func (m *MockAPIClientInterface) UpsertPresetWithBody(ctx context.Context, presetId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, presetId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertPresetWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertPresetWithBody indicates an expected call of UpsertPresetWithBody.
func (mr *MockAPIClientInterfaceMockRecorder) UpsertPresetWithBody(ctx, presetId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, presetId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPresetWithBody", reflect.TypeOf((*MockAPIClientInterface)(nil).UpsertPresetWithBody), varargs...)
}

// UpsertPresetWithBodyWithResponse mocks base method.
func (m *MockAPIClientInterface) UpsertPresetWithBodyWithResponse(ctx context.Context, presetId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.UpsertPresetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, presetId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertPresetWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.UpsertPresetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertPresetWithBodyWithResponse indicates an expected call of UpsertPresetWithBodyWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) UpsertPresetWithBodyWithResponse(ctx, presetId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, presetId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPresetWithBodyWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).UpsertPresetWithBodyWithResponse), varargs...)
}

// UpsertPresetWithResponse mocks base method.
func (m *MockAPIClientInterface) UpsertPresetWithResponse(ctx context.Context, presetId string, body api.UpsertPresetJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.UpsertPresetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, presetId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertPresetWithResponse", varargs...)
	ret0, _ := ret[0].(*api.UpsertPresetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertPresetWithResponse indicates an expected call of UpsertPresetWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) UpsertPresetWithResponse(ctx, presetId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, presetId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPresetWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).UpsertPresetWithResponse), varargs...)
}

// UpsertSearchOverride mocks base method.
func (m *MockAPIClientInterface) UpsertSearchOverride(ctx context.Context, collectionName, overrideId string, body api.UpsertSearchOverrideJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, overrideId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertSearchOverride", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertSearchOverride indicates an expected call of UpsertSearchOverride.
func (mr *MockAPIClientInterfaceMockRecorder) UpsertSearchOverride(ctx, collectionName, overrideId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, overrideId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSearchOverride", reflect.TypeOf((*MockAPIClientInterface)(nil).UpsertSearchOverride), varargs...)
}

// UpsertSearchOverrideWithBody mocks base method.
func (m *MockAPIClientInterface) UpsertSearchOverrideWithBody(ctx context.Context, collectionName, overrideId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, overrideId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertSearchOverrideWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertSearchOverrideWithBody indicates an expected call of UpsertSearchOverrideWithBody.
func (mr *MockAPIClientInterfaceMockRecorder) UpsertSearchOverrideWithBody(ctx, collectionName, overrideId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, overrideId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSearchOverrideWithBody", reflect.TypeOf((*MockAPIClientInterface)(nil).UpsertSearchOverrideWithBody), varargs...)
}

// UpsertSearchOverrideWithBodyWithResponse mocks base method.
func (m *MockAPIClientInterface) UpsertSearchOverrideWithBodyWithResponse(ctx context.Context, collectionName, overrideId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.UpsertSearchOverrideResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, overrideId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertSearchOverrideWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.UpsertSearchOverrideResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertSearchOverrideWithBodyWithResponse indicates an expected call of UpsertSearchOverrideWithBodyWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) UpsertSearchOverrideWithBodyWithResponse(ctx, collectionName, overrideId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, overrideId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSearchOverrideWithBodyWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).UpsertSearchOverrideWithBodyWithResponse), varargs...)
}

// UpsertSearchOverrideWithResponse mocks base method.
func (m *MockAPIClientInterface) UpsertSearchOverrideWithResponse(ctx context.Context, collectionName, overrideId string, body api.UpsertSearchOverrideJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.UpsertSearchOverrideResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, overrideId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertSearchOverrideWithResponse", varargs...)
	ret0, _ := ret[0].(*api.UpsertSearchOverrideResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertSearchOverrideWithResponse indicates an expected call of UpsertSearchOverrideWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) UpsertSearchOverrideWithResponse(ctx, collectionName, overrideId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, overrideId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSearchOverrideWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).UpsertSearchOverrideWithResponse), varargs...)
}

// UpsertSearchSynonym mocks base method.
func (m *MockAPIClientInterface) UpsertSearchSynonym(ctx context.Context, collectionName, synonymId string, body api.UpsertSearchSynonymJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, synonymId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertSearchSynonym", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertSearchSynonym indicates an expected call of UpsertSearchSynonym.
func (mr *MockAPIClientInterfaceMockRecorder) UpsertSearchSynonym(ctx, collectionName, synonymId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, synonymId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSearchSynonym", reflect.TypeOf((*MockAPIClientInterface)(nil).UpsertSearchSynonym), varargs...)
}

// UpsertSearchSynonymWithBody mocks base method.
func (m *MockAPIClientInterface) UpsertSearchSynonymWithBody(ctx context.Context, collectionName, synonymId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, synonymId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertSearchSynonymWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertSearchSynonymWithBody indicates an expected call of UpsertSearchSynonymWithBody.
func (mr *MockAPIClientInterfaceMockRecorder) UpsertSearchSynonymWithBody(ctx, collectionName, synonymId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, synonymId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSearchSynonymWithBody", reflect.TypeOf((*MockAPIClientInterface)(nil).UpsertSearchSynonymWithBody), varargs...)
}

// UpsertSearchSynonymWithBodyWithResponse mocks base method.
func (m *MockAPIClientInterface) UpsertSearchSynonymWithBodyWithResponse(ctx context.Context, collectionName, synonymId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.UpsertSearchSynonymResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, synonymId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertSearchSynonymWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.UpsertSearchSynonymResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertSearchSynonymWithBodyWithResponse indicates an expected call of UpsertSearchSynonymWithBodyWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) UpsertSearchSynonymWithBodyWithResponse(ctx, collectionName, synonymId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, synonymId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSearchSynonymWithBodyWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).UpsertSearchSynonymWithBodyWithResponse), varargs...)
}

// UpsertSearchSynonymWithResponse mocks base method.
func (m *MockAPIClientInterface) UpsertSearchSynonymWithResponse(ctx context.Context, collectionName, synonymId string, body api.UpsertSearchSynonymJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.UpsertSearchSynonymResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, collectionName, synonymId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertSearchSynonymWithResponse", varargs...)
	ret0, _ := ret[0].(*api.UpsertSearchSynonymResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertSearchSynonymWithResponse indicates an expected call of UpsertSearchSynonymWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) UpsertSearchSynonymWithResponse(ctx, collectionName, synonymId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, collectionName, synonymId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSearchSynonymWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).UpsertSearchSynonymWithResponse), varargs...)
}

// UpsertStopwordsSet mocks base method.
func (m *MockAPIClientInterface) UpsertStopwordsSet(ctx context.Context, setId string, body api.UpsertStopwordsSetJSONRequestBody, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, setId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertStopwordsSet", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertStopwordsSet indicates an expected call of UpsertStopwordsSet.
func (mr *MockAPIClientInterfaceMockRecorder) UpsertStopwordsSet(ctx, setId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, setId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertStopwordsSet", reflect.TypeOf((*MockAPIClientInterface)(nil).UpsertStopwordsSet), varargs...)
}

// UpsertStopwordsSetWithBody mocks base method.
func (m *MockAPIClientInterface) UpsertStopwordsSetWithBody(ctx context.Context, setId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, setId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertStopwordsSetWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertStopwordsSetWithBody indicates an expected call of UpsertStopwordsSetWithBody.
func (mr *MockAPIClientInterfaceMockRecorder) UpsertStopwordsSetWithBody(ctx, setId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, setId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertStopwordsSetWithBody", reflect.TypeOf((*MockAPIClientInterface)(nil).UpsertStopwordsSetWithBody), varargs...)
}

// UpsertStopwordsSetWithBodyWithResponse mocks base method.
func (m *MockAPIClientInterface) UpsertStopwordsSetWithBodyWithResponse(ctx context.Context, setId, contentType string, body io.Reader, reqEditors ...api.RequestEditorFn) (*api.UpsertStopwordsSetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, setId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertStopwordsSetWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*api.UpsertStopwordsSetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertStopwordsSetWithBodyWithResponse indicates an expected call of UpsertStopwordsSetWithBodyWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) UpsertStopwordsSetWithBodyWithResponse(ctx, setId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, setId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertStopwordsSetWithBodyWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).UpsertStopwordsSetWithBodyWithResponse), varargs...)
}

// UpsertStopwordsSetWithResponse mocks base method.
func (m *MockAPIClientInterface) UpsertStopwordsSetWithResponse(ctx context.Context, setId string, body api.UpsertStopwordsSetJSONRequestBody, reqEditors ...api.RequestEditorFn) (*api.UpsertStopwordsSetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, setId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertStopwordsSetWithResponse", varargs...)
	ret0, _ := ret[0].(*api.UpsertStopwordsSetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertStopwordsSetWithResponse indicates an expected call of UpsertStopwordsSetWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) UpsertStopwordsSetWithResponse(ctx, setId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, setId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertStopwordsSetWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).UpsertStopwordsSetWithResponse), varargs...)
}

// Vote mocks base method.
func (m *MockAPIClientInterface) Vote(ctx context.Context, reqEditors ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Vote", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Vote indicates an expected call of Vote.
func (mr *MockAPIClientInterfaceMockRecorder) Vote(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vote", reflect.TypeOf((*MockAPIClientInterface)(nil).Vote), varargs...)
}

// VoteWithResponse mocks base method.
func (m *MockAPIClientInterface) VoteWithResponse(ctx context.Context, reqEditors ...api.RequestEditorFn) (*api.VoteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VoteWithResponse", varargs...)
	ret0, _ := ret[0].(*api.VoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VoteWithResponse indicates an expected call of VoteWithResponse.
func (mr *MockAPIClientInterfaceMockRecorder) VoteWithResponse(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VoteWithResponse", reflect.TypeOf((*MockAPIClientInterface)(nil).VoteWithResponse), varargs...)
}
