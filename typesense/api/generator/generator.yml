components:
  schemas:
    APIStatsResponse:
      properties:
        delete_latency_ms:
          format: double
          type: number
        delete_requests_per_second:
          format: double
          type: number
        import_latency_ms:
          format: double
          type: number
        import_requests_per_second:
          format: double
          type: number
        latency_ms:
          type: object
          x-go-type: map[string]float64
        overloaded_requests_per_second:
          format: double
          type: number
        pending_write_batches:
          format: double
          type: number
        requests_per_second:
          type: object
          x-go-type: map[string]float64
        search_latency_ms:
          format: double
          type: number
        search_requests_per_second:
          format: double
          type: number
        total_requests_per_second:
          format: double
          type: number
        write_latency_ms:
          format: double
          type: number
        write_requests_per_second:
          format: double
          type: number
      type: object
    AnalyticsEventCreateResponse:
      properties:
        ok:
          type: boolean
      required:
        - ok
      type: object
    AnalyticsEventCreateSchema:
      properties:
        data:
          type: object
        name:
          type: string
        type:
          type: string
      required:
        - type
        - name
        - data
      type: object
    AnalyticsRuleDeleteResponse:
      properties:
        name:
          type: string
      required:
        - name
      type: object
    AnalyticsRuleParameters:
      properties:
        destination:
          $ref: '#/components/schemas/AnalyticsRuleParametersDestination'
        expand_query:
          type: boolean
        limit:
          type: integer
        source:
          $ref: '#/components/schemas/AnalyticsRuleParametersSource'
      required:
        - source
        - destination
      type: object
    AnalyticsRuleParametersDestination:
      properties:
        collection:
          type: string
        counter_field:
          type: string
      required:
        - collection
      type: object
    AnalyticsRuleParametersSource:
      properties:
        collections:
          items:
            type: string
          type: array
        events:
          items:
            properties:
              name:
                type: string
              type:
                type: string
              weight:
                format: float
                type: number
            required:
              - type
              - weight
              - name
            type: object
          type: array
      required:
        - collections
      type: object
    AnalyticsRuleSchema:
      allOf:
        - $ref: '#/components/schemas/AnalyticsRuleUpsertSchema'
        - properties:
            name:
              type: string
          required:
            - name
          type: object
    AnalyticsRuleUpsertSchema:
      properties:
        params:
          $ref: '#/components/schemas/AnalyticsRuleParameters'
        type:
          enum:
            - popular_queries
            - nohits_queries
            - counter
          type: string
      required:
        - type
        - params
      type: object
    AnalyticsRulesRetrieveSchema:
      properties:
        rules:
          items:
            $ref: '#/components/schemas/AnalyticsRuleSchema'
          type: array
          x-go-type: '[]*AnalyticsRuleSchema'
      type: object
    ApiKey:
      allOf:
        - $ref: '#/components/schemas/ApiKeySchema'
        - properties:
            id:
              format: int64
              readOnly: true
              type: integer
            value_prefix:
              readOnly: true
              type: string
          type: object
    ApiKeyDeleteResponse:
      properties:
        id:
          description: The id of the API key that was deleted
          format: int64
          type: integer
      required:
        - id
      type: object
    ApiKeySchema:
      properties:
        actions:
          items:
            type: string
          type: array
        collections:
          items:
            type: string
          type: array
        description:
          type: string
        expires_at:
          format: int64
          type: integer
        value:
          type: string
      required:
        - actions
        - collections
        - description
      type: object
    ApiKeysResponse:
      properties:
        keys:
          items:
            $ref: '#/components/schemas/ApiKey'
          type: array
          x-go-type: '[]*ApiKey'
      required:
        - keys
      type: object
    ApiResponse:
      properties:
        message:
          type: string
      required:
        - message
      type: object
    CollectionAlias:
      properties:
        collection_name:
          description: Name of the collection the alias mapped to
          type: string
        name:
          description: Name of the collection alias
          readOnly: true
          type: string
      required:
        - collection_name
        - name
      type: object
    CollectionAliasSchema:
      properties:
        collection_name:
          description: Name of the collection you wish to map the alias to
          type: string
      required:
        - collection_name
      type: object
    CollectionAliasesResponse:
      properties:
        aliases:
          items:
            $ref: '#/components/schemas/CollectionAlias'
          type: array
          x-go-type: '[]*CollectionAlias'
      required:
        - aliases
      type: object
    CollectionResponse:
      allOf:
        - $ref: '#/components/schemas/CollectionSchema'
        - properties:
            created_at:
              description: Timestamp of when the collection was created (Unix epoch in seconds)
              format: int64
              readOnly: true
              type: integer
            num_documents:
              description: Number of documents in the collection
              format: int64
              readOnly: true
              type: integer
          required:
            - num_documents
            - created_at
          type: object
    CollectionSchema:
      properties:
        default_sorting_field:
          default: ""
          description: The name of an int32 / float field that determines the order in which the search results are ranked when a sort_by clause is not provided during searching. This field must indicate some kind of popularity.
          example: num_employees
          type: string
        enable_nested_fields:
          default: false
          description: Enables experimental support at a collection level for nested object or object array fields. This field is only available if the Typesense server is version `0.24.0.rcn34` or later.
          example: true
          type: boolean
        fields:
          description: A list of fields for querying, filtering and faceting
          example:
            - facet: false
              name: num_employees
              type: int32
            - facet: false
              name: company_name
              type: string
            - facet: true
              name: country
              type: string
          items:
            $ref: '#/components/schemas/Field'
          type: array
        name:
          description: Name of the collection
          example: companies
          type: string
        symbols_to_index:
          default: []
          description: |
            List of symbols or special characters to be indexed.
          items:
            maxLength: 1
            minLength: 1
            type: string
          type: array
        token_separators:
          default: []
          description: |
            List of symbols or special characters to be used for splitting the text into individual words in addition to space and new-line characters.
          items:
            maxLength: 1
            minLength: 1
            type: string
          type: array
        voice_query_model:
          $ref: '#/components/schemas/VoiceQueryModelCollectionConfig'
      required:
        - name
        - fields
      type: object
    CollectionUpdateSchema:
      properties:
        fields:
          description: A list of fields for querying, filtering and faceting
          example:
            - facet: false
              name: company_name
              type: string
            - facet: false
              name: num_employees
              type: int32
            - facet: true
              name: country
              type: string
          items:
            $ref: '#/components/schemas/Field'
          type: array
      required:
        - fields
      type: object
    ConversationModelCreateSchema:
      allOf:
        - $ref: '#/components/schemas/ConversationModelUpdateSchema'
        - properties:
            history_collection:
              description: Typesense collection that stores the historical conversations
              type: string
            max_bytes:
              description: |
                The maximum number of bytes to send to the LLM in every API call. Consult the LLM's documentation on the number of bytes supported in the context window.
              type: integer
            model_name:
              description: Name of the LLM model offered by OpenAI, Cloudflare or vLLM
              type: string
          required:
            - model_name
            - max_bytes
            - history_collection
          type: object
      required:
        - model_name
        - max_bytes
    ConversationModelSchema:
      allOf:
        - $ref: '#/components/schemas/ConversationModelCreateSchema'
        - properties:
            id:
              description: An explicit id for the model, otherwise the API will return a response with an auto-generated conversation model id.
              type: string
          required:
            - id
          type: object
    ConversationModelUpdateSchema:
      properties:
        account_id:
          description: LLM service's account ID (only applicable for Cloudflare)
          type: string
        api_key:
          description: The LLM service's API Key
          type: string
        history_collection:
          description: Typesense collection that stores the historical conversations
          type: string
        id:
          description: An explicit id for the model, otherwise the API will return a response with an auto-generated conversation model id.
          type: string
        max_bytes:
          description: |
            The maximum number of bytes to send to the LLM in every API call. Consult the LLM's documentation on the number of bytes supported in the context window.
          type: integer
        model_name:
          description: Name of the LLM model offered by OpenAI, Cloudflare or vLLM
          type: string
        system_prompt:
          description: The system prompt that contains special instructions to the LLM
          type: string
        ttl:
          description: |
            Time interval in seconds after which the messages would be deleted. Default: 86400 (24 hours)
          type: integer
        vllm_url:
          description: URL of vLLM service
          type: string
      type: object
    DirtyValues:
      enum:
        - coerce_or_reject
        - coerce_or_drop
        - drop
        - reject
      type: string
    DocumentIndexParameters:
      properties:
        dirty_values:
          $ref: '#/components/schemas/DirtyValues'
      type: object
    DropTokensMode:
      description: |
        Dictates the direction in which the words in the query must be dropped when the original words in the query do not appear in any document. Values: right_to_left (default), left_to_right, both_sides:3 A note on both_sides:3 - for queries upto 3 tokens (words) in length, this mode will drop tokens from both sides and exhaustively rank all matching results. If query length is greater than 3 words, Typesense will just fallback to default behavior of right_to_left
      enum:
        - right_to_left
        - left_to_right
        - both_sides:3
      type: string
    ErrorResponse:
      properties:
        message:
          type: string
      type: object
    FacetCounts:
      properties:
        counts:
          items:
            properties:
              count:
                type: integer
              highlighted:
                type: string
              parent:
                type: object
              value:
                type: string
            type: object
          type: array
        field_name:
          type: string
        stats:
          properties:
            avg:
              format: double
              type: number
            max:
              format: double
              type: number
            min:
              format: double
              type: number
            sum:
              format: double
              type: number
            total_values:
              type: integer
          type: object
      type: object
    Field:
      properties:
        drop:
          example: true
          type: boolean
        embed:
          properties:
            from:
              items:
                type: string
              type: array
            model_config:
              properties:
                access_token:
                  type: string
                api_key:
                  type: string
                client_id:
                  type: string
                client_secret:
                  type: string
                indexing_prefix:
                  type: string
                model_name:
                  type: string
                project_id:
                  type: string
                query_prefix:
                  type: string
                refresh_token:
                  type: string
                url:
                  type: string
              required:
                - model_name
              type: object
          required:
            - from
            - model_config
          type: object
        facet:
          example: false
          type: boolean
        index:
          default: true
          example: true
          type: boolean
        infix:
          default: false
          example: true
          type: boolean
        locale:
          example: el
          type: string
        name:
          example: company_name
          type: string
        num_dim:
          example: 256
          type: integer
        optional:
          example: true
          type: boolean
        range_index:
          description: |
            Enables an index optimized for range filtering on numerical fields (e.g. rating:>3.5). Default: false.
          type: boolean
        reference:
          description: |
            Name of a field in another collection that should be linked to this collection so that it can be joined during query.
          type: string
        sort:
          example: true
          type: boolean
        stem:
          description: |
            Values are stemmed before indexing in-memory. Default: false.
          type: boolean
        stem_dictionary:
          description: Name of the stemming dictionary to use for this field
          example: irregular-plurals
          type: string
        store:
          description: |
            When set to false, the field value will not be stored on disk. Default: true.
          type: boolean
        symbols_to_index:
          default: []
          description: |
            List of symbols or special characters to be indexed.
          items:
            maxLength: 1
            minLength: 1
            type: string
          type: array
        token_separators:
          default: []
          description: |
            List of symbols or special characters to be used for splitting the text into individual words in addition to space and new-line characters.
          items:
            maxLength: 1
            minLength: 1
            type: string
          type: array
        type:
          example: string
          type: string
        vec_dist:
          description: |
            The distance metric to be used for vector search. Default: `cosine`. You can also use `ip` for inner product.
          type: string
      required:
        - name
        - type
      type: object
    HealthStatus:
      properties:
        ok:
          type: boolean
      required:
        - ok
      type: object
    IndexAction:
      enum:
        - create
        - update
        - upsert
        - emplace
      type: string
    MultiSearchCollectionParameters:
      allOf:
        - $ref: '#/components/schemas/MultiSearchParameters'
        - properties:
            collection:
              description: |
                The collection to search in.
              type: string
            rerank_hybrid_matches:
              default: false
              description: |
                When true, computes both text match and vector distance scores for all matches in hybrid search. Documents found only through keyword search will get a vector distance score, and documents found only through vector search will get a text match score.
              type: boolean
            x-typesense-api-key:
              description: A separate search API key for each search within a multi_search request
              type: string
          type: object
    MultiSearchParameters:
      description: |
        Parameters for the multi search API.
      properties:
        cache_ttl:
          description: |
            The duration (in seconds) that determines how long the search query is cached. This value can be set on a per-query basis. Default: 60.
          type: integer
        conversation:
          description: |
            Enable conversational search.
          type: boolean
        conversation_id:
          description: |
            The Id of a previous conversation to continue, this tells Typesense to include prior context when communicating with the LLM.
          type: string
        conversation_model_id:
          description: |
            The Id of Conversation Model to be used.
          type: string
        drop_tokens_mode:
          $ref: '#/components/schemas/DropTokensMode'
        drop_tokens_threshold:
          description: |
            If the number of results found for a specific query is less than this number, Typesense will attempt to drop the tokens in the query until enough results are found. Tokens that have the least individual hits are dropped first. Set to 0 to disable. Default: 10
          type: integer
        enable_overrides:
          default: false
          description: |
            If you have some overrides defined but want to disable all of them during query time, you can do that by setting this parameter to false
          type: boolean
        enable_synonyms:
          description: |
            If you have some synonyms defined but want to disable all of them for a particular search query, set enable_synonyms to false. Default: true
          type: boolean
        enable_typos_for_alpha_numerical_tokens:
          description: |
            Set this parameter to false to disable typos on alphanumerical query tokens. Default: true.
          type: boolean
        enable_typos_for_numerical_tokens:
          default: true
          description: |
            Make Typesense disable typos for numerical tokens.
          type: boolean
        exclude_fields:
          description: List of fields from the document to exclude in the search result
          type: string
        exhaustive_search:
          description: |
            Setting this to true will make Typesense consider all prefixes and typo corrections of the words in the query without stopping early when enough results are found (drop_tokens_threshold and typo_tokens_threshold configurations are ignored).
          type: boolean
        facet_by:
          description: A list of fields that will be used for faceting your results on. Separate multiple fields with a comma.
          type: string
        facet_query:
          description: Facet values that are returned can now be filtered via this parameter. The matching facet text is also highlighted. For example, when faceting by `category`, you can set `facet_query=category:shoe` to return only facet values that contain the prefix "shoe".
          type: string
        facet_return_parent:
          description: |
            Comma separated string of nested facet fields whose parent object should be returned in facet response.
          type: string
        facet_strategy:
          description: |
            Choose the underlying faceting strategy used. Comma separated string of allows values: exhaustive, top_values or automatic (default).
          type: string
        filter_by:
          description: Filter conditions for refining youropen api validator search results. Separate multiple conditions with &&.
          example: 'num_employees:>100 && country: [USA, UK]'
          type: string
        filter_curated_hits:
          description: |
            Whether the filter_by condition of the search query should be applicable to curated results (override definitions, pinned hits, hidden hits, etc.). Default: false
          type: boolean
        group_by:
          description: You can aggregate search results into groups or buckets by specify one or more `group_by` fields. Separate multiple fields with a comma. To group on a particular field, it must be a faceted field.
          type: string
        group_limit:
          description: |
            Maximum number of hits to be returned for every group. If the `group_limit` is set as `K` then only the top K hits in each group are returned in the response. Default: 3
          type: integer
        group_missing_values:
          description: |
            Setting this parameter to true will place all documents that have a null value in the group_by field, into a single group. Setting this parameter to false, will cause each document with a null value in the group_by field to not be grouped with other documents. Default: true
          type: boolean
        hidden_hits:
          description: |
            A list of records to unconditionally hide from search results. A list of `record_id`s to hide. Eg: to hide records with IDs 123 and 456, you'd specify `123,456`.
            You could also use the Overrides feature to override search results based on rules. Overrides are applied first, followed by `pinned_hits` and finally `hidden_hits`.
          type: string
        highlight_affix_num_tokens:
          description: |
            The number of tokens that should surround the highlighted text on each side. Default: 4
          type: integer
        highlight_end_tag:
          description: |
            The end tag used for the highlighted snippets. Default: `</mark>`
          type: string
        highlight_fields:
          description: |
            A list of custom fields that must be highlighted even if you don't query for them
          type: string
        highlight_full_fields:
          description: List of fields which should be highlighted fully without snippeting
          type: string
        highlight_start_tag:
          description: |
            The start tag used for the highlighted snippets. Default: `<mark>`
          type: string
        include_fields:
          description: List of fields from the document to include in the search result
          type: string
        infix:
          description: If infix index is enabled for this field, infix searching can be done on a per-field basis by sending a comma separated string parameter called infix to the search query. This parameter can have 3 values; `off` infix search is disabled, which is default `always` infix search is performed along with regular search `fallback` infix search is performed if regular search does not produce results
          type: string
        limit:
          description: |
            Number of hits to fetch. Can be used as an alternative to the per_page parameter. Default: 10.
          type: integer
        max_extra_prefix:
          description: There are also 2 parameters that allow you to control the extent of infix searching max_extra_prefix and max_extra_suffix which specify the maximum number of symbols before or after the query that can be present in the token. For example query "K2100" has 2 extra symbols in "6PK2100". By default, any number of prefixes/suffixes can be present for a match.
          type: integer
        max_extra_suffix:
          description: There are also 2 parameters that allow you to control the extent of infix searching max_extra_prefix and max_extra_suffix which specify the maximum number of symbols before or after the query that can be present in the token. For example query "K2100" has 2 extra symbols in "6PK2100". By default, any number of prefixes/suffixes can be present for a match.
          type: integer
        max_facet_values:
          description: Maximum number of facet values to be returned.
          type: integer
        min_len_1typo:
          description: |
            Minimum word length for 1-typo correction to be applied. The value of num_typos is still treated as the maximum allowed typos.
          type: integer
        min_len_2typo:
          description: |
            Minimum word length for 2-typo correction to be applied. The value of num_typos is still treated as the maximum allowed typos.
          type: integer
        num_typos:
          description: |
            The number of typographical errors (1 or 2) that would be tolerated. Default: 2
          type: string
        offset:
          description: Identifies the starting point to return hits from a result set. Can be used as an alternative to the page parameter.
          type: integer
        override_tags:
          description: Comma separated list of tags to trigger the curations rules that match the tags.
          type: string
        page:
          description: Results from this specific page number would be fetched.
          type: integer
        per_page:
          description: 'Number of results to fetch per page. Default: 10'
          type: integer
        pinned_hits:
          description: |
            A list of records to unconditionally include in the search results at specific positions. An example use case would be to feature or promote certain items on the top of search results. A list of `record_id:hit_position`. Eg: to include a record with ID 123 at Position 1 and another record with ID 456 at Position 5, you'd specify `123:1,456:5`.
            You could also use the Overrides feature to override search results based on rules. Overrides are applied first, followed by `pinned_hits` and finally `hidden_hits`.
          type: string
        pre_segmented_query:
          default: false
          description: |
            You can index content from any logographic language into Typesense if you are able to segment / split the text into space-separated words yourself before indexing and querying.
            Set this parameter to true to do the same
          type: boolean
        prefix:
          description: Boolean field to indicate that the last word in the query should be treated as a prefix, and not as a whole word. This is used for building autocomplete and instant search interfaces. Defaults to true.
          type: string
        preset:
          description: |
            Search using a bunch of search parameters by setting this parameter to the name of the existing Preset.
          type: string
        prioritize_exact_match:
          default: true
          description: |
            Set this parameter to true to ensure that an exact match is ranked above the others
          type: boolean
        prioritize_num_matching_fields:
          default: true
          description: |
            Make Typesense prioritize documents where the query words appear in more number of fields.
          type: boolean
        prioritize_token_position:
          default: false
          description: |
            Make Typesense prioritize documents where the query words appear earlier in the text.
          type: boolean
        q:
          description: The query text to search for in the collection. Use * as the search string to return all documents. This is typically useful when used in conjunction with filter_by.
          type: string
        query_by:
          description: A list of `string` fields that should be queried against. Multiple fields are separated with a comma.
          type: string
        query_by_weights:
          description: The relative weight to give each `query_by` field when ranking results. This can be used to boost fields in priority, when looking for matches. Multiple fields are separated with a comma.
          type: string
        remote_embedding_num_tries:
          description: |
            Number of times to retry fetching remote embeddings.
          type: integer
        remote_embedding_timeout_ms:
          description: |
            Timeout (in milliseconds) for fetching remote embeddings.
          type: integer
        search_cutoff_ms:
          description: |
            Typesense will attempt to return results early if the cutoff time has elapsed. This is not a strict guarantee and facet computation is not bound by this parameter.
          type: integer
        snippet_threshold:
          description: |
            Field values under this length will be fully highlighted, instead of showing a snippet of relevant portion. Default: 30
          type: integer
        sort_by:
          description: A list of numerical fields and their corresponding sort orders that will be used for ordering your results. Up to 3 sort fields can be specified. The text similarity score is exposed as a special `_text_match` field that you can use in the list of sorting fields. If no `sort_by` parameter is specified, results are sorted by `_text_match:desc,default_sorting_field:desc`
          type: string
        stopwords:
          description: |
            Name of the stopwords set to apply for this search, the keywords present in the set will be removed from the search query.
          type: string
        synonym_num_typos:
          description: |
            Allow synonym resolution on typo-corrected words in the query. Default: 0
          type: integer
        synonym_prefix:
          description: |
            Allow synonym resolution on word prefixes in the query. Default: false
          type: boolean
        text_match_type:
          description: In a multi-field matching context, this parameter determines how the representative text match score of a record is calculated. Possible values are max_score (default) or max_weight.
          type: string
        typo_tokens_threshold:
          description: |
            If the number of results found for a specific query is less than this number, Typesense will attempt to look for tokens with more typos until enough results are found. Default: 100
          type: integer
        use_cache:
          description: |
            Enable server side caching of search query results. By default, caching is disabled.
          type: boolean
        vector_query:
          description: |
            Vector query expression for fetching documents "closest" to a given query/document vector.
          type: string
        voice_query:
          description: |
            The base64 encoded audio file in 16 khz 16-bit WAV format.
          type: string
      type: object
    MultiSearchResult:
      properties:
        conversation:
          $ref: '#/components/schemas/SearchResultConversation'
        results:
          items:
            $ref: '#/components/schemas/MultiSearchResultItem'
          type: array
        hits:
          items:
            $ref: '#/components/schemas/SearchResultHit'
          type: array
      required:
        - results
      type: object
    MultiSearchResultItem:
      allOf:
        - $ref: '#/components/schemas/SearchResult'
        - properties:
            code:
              description: HTTP error code
              format: int64
              type: integer
            error:
              description: Error description
              type: string
          type: object
    MultiSearchSearchesParameter:
      properties:
        searches:
          items:
            $ref: '#/components/schemas/MultiSearchCollectionParameters'
          type: array
        union:
          description: When true, merges the search results from each search query into a single ordered set of hits.
          type: boolean
      required:
        - searches
      type: object
    PresetDeleteSchema:
      properties:
        name:
          type: string
      required:
        - name
      type: object
    PresetSchema:
      allOf:
        - $ref: '#/components/schemas/PresetUpsertSchema'
        - properties:
            name:
              type: string
          required:
            - name
          type: object
    PresetUpsertSchema:
      properties:
        value:
          oneOf:
            - $ref: '#/components/schemas/SearchParameters'
            - $ref: '#/components/schemas/MultiSearchSearchesParameter'
      required:
        - value
    PresetsRetrieveSchema:
      properties:
        presets:
          items:
            $ref: '#/components/schemas/PresetSchema'
          type: array
          x-go-type: '[]*PresetSchema'
      required:
        - presets
      type: object
    SchemaChangeStatus:
      properties:
        altered_docs:
          description: Number of documents that have been altered
          type: integer
        collection:
          description: Name of the collection being modified
          type: string
        validated_docs:
          description: Number of documents that have been validated
          type: integer
      type: object
    ScopedKeyParameters:
      properties:
        expires_at:
          format: int64
          type: integer
        filter_by:
          type: string
      type: object
    SearchGroupedHit:
      properties:
        found:
          type: integer
        group_key:
          items: {}
          type: array
        hits:
          description: The documents that matched the search query
          items:
            $ref: '#/components/schemas/SearchResultHit'
          type: array
      required:
        - group_key
        - hits
      type: object
    SearchHighlight:
      properties:
        field:
          example: company_name
          type: string
        indices:
          description: The indices property will be present only for string[] fields and will contain the corresponding indices of the snippets in the search field
          example: 1
          items:
            type: integer
          type: array
        matched_tokens:
          items:
            type: object
            x-go-type: interface{}
          type: array
        snippet:
          description: Present only for (non-array) string fields
          example: <mark>Stark</mark> Industries
          type: string
        snippets:
          description: Present only for (array) string[] fields
          example:
            - <mark>Stark</mark> Industries
            - <mark>Stark</mark> Corp
          items:
            type: string
          type: array
        value:
          description: Full field value with highlighting, present only for (non-array) string fields
          example: <mark>Stark</mark> Industries is a major supplier of space equipment.
          type: string
        values:
          description: Full field value with highlighting, present only for (array) string[] fields
          example:
            - <mark>Stark</mark> Industries
            - <mark>Stark</mark> Corp
          items:
            type: string
          type: array
      type: object
    SearchOverride:
      allOf:
        - $ref: '#/components/schemas/SearchOverrideSchema'
        - properties:
            id:
              readOnly: true
              type: string
          required:
            - id
          type: object
    SearchOverrideDeleteResponse:
      properties:
        id:
          description: The id of the override that was deleted
          type: string
      required:
        - id
      type: object
    SearchOverrideExclude:
      properties:
        id:
          description: document id that should be excluded from the search results.
          type: string
      required:
        - id
      type: object
    SearchOverrideInclude:
      properties:
        id:
          description: document id that should be included
          type: string
        position:
          description: position number where document should be included in the search results
          type: integer
      required:
        - id
        - position
      type: object
    SearchOverrideRule:
      properties:
        filter_by:
          description: |
            Indicates that the override should apply when the filter_by parameter in a search query exactly matches the string specified here (including backticks, spaces, brackets, etc).
          type: string
        match:
          description: |
            Indicates whether the match on the query term should be `exact` or `contains`. If we want to match all queries that contained the word `apple`, we will use the `contains` match instead.
          enum:
            - exact
            - contains
          type: string
        query:
          description: Indicates what search queries should be overridden
          type: string
        tags:
          description: List of tag values to associate with this override rule.
          items:
            type: string
          type: array
      type: object
    SearchOverrideSchema:
      properties:
        effective_from_ts:
          description: |
            A Unix timestamp that indicates the date/time from which the override will be active. You can use this to create override rules that start applying from a future point in time.
          type: integer
        effective_to_ts:
          description: |
            A Unix timestamp that indicates the date/time until which the override will be active. You can use this to create override rules that stop applying after a period of time.
          type: integer
        excludes:
          description: List of document `id`s that should be excluded from the search results.
          items:
            $ref: '#/components/schemas/SearchOverrideExclude'
          type: array
        filter_by:
          description: |
            A filter by clause that is applied to any search query that matches the override rule.
          type: string
        filter_curated_hits:
          description: |
            When set to true, the filter conditions of the query is applied to the curated records as well. Default: false.
          type: boolean
        includes:
          description: List of document `id`s that should be included in the search results with their corresponding `position`s.
          items:
            $ref: '#/components/schemas/SearchOverrideInclude'
          type: array
        metadata:
          description: |
            Return a custom JSON object in the Search API response, when this rule is triggered. This can can be used to display a pre-defined message (eg: a promotion banner) on the front-end when a particular rule is triggered.
          type: object
        remove_matched_tokens:
          description: |
            Indicates whether search query tokens that exist in the override's rule should be removed from the search query.
          type: boolean
        replace_query:
          description: |
            Replaces the current search query with this value, when the search query matches the override rule.
          type: string
        rule:
          $ref: '#/components/schemas/SearchOverrideRule'
        sort_by:
          description: |
            A sort by clause that is applied to any search query that matches the override rule.
          type: string
        stop_processing:
          description: |
            When set to true, override processing will stop at the first matching rule. When set to false override processing will continue and multiple override actions will be triggered in sequence. Overrides are processed in the lexical sort order of their id field. Default: true.
          type: boolean
      required:
        - rule
      type: object
    SearchOverridesResponse:
      properties:
        overrides:
          items:
            $ref: '#/components/schemas/SearchOverride'
          type: array
          x-go-type: '[]*SearchOverride'
      required:
        - overrides
      type: object
    SearchParameters:
      properties:
        cache_ttl:
          description: |
            The duration (in seconds) that determines how long the search query is cached. This value can be set on a per-query basis. Default: 60.
          type: integer
        conversation:
          description: |
            Enable conversational search.
          type: boolean
        conversation_id:
          description: |
            The Id of a previous conversation to continue, this tells Typesense to include prior context when communicating with the LLM.
          type: string
        conversation_model_id:
          description: |
            The Id of Conversation Model to be used.
          type: string
        drop_tokens_mode:
          $ref: '#/components/schemas/DropTokensMode'
        drop_tokens_threshold:
          description: |
            If the number of results found for a specific query is less than this number, Typesense will attempt to drop the tokens in the query until enough results are found. Tokens that have the least individual hits are dropped first. Set to 0 to disable. Default: 10
          type: integer
        enable_highlight_v1:
          default: true
          description: |
            Flag for enabling/disabling the deprecated, old highlight structure in the response. Default: true
          type: boolean
        enable_overrides:
          default: false
          description: |
            If you have some overrides defined but want to disable all of them during query time, you can do that by setting this parameter to false
          type: boolean
        enable_synonyms:
          description: |
            If you have some synonyms defined but want to disable all of them for a particular search query, set enable_synonyms to false. Default: true
          type: boolean
        enable_typos_for_alpha_numerical_tokens:
          description: |
            Set this parameter to false to disable typos on alphanumerical query tokens. Default: true.
          type: boolean
        enable_typos_for_numerical_tokens:
          default: true
          description: |
            Make Typesense disable typos for numerical tokens.
          type: boolean
        exclude_fields:
          description: List of fields from the document to exclude in the search result
          type: string
        exhaustive_search:
          description: |
            Setting this to true will make Typesense consider all prefixes and typo corrections of the words in the query without stopping early when enough results are found (drop_tokens_threshold and typo_tokens_threshold configurations are ignored).
          type: boolean
        facet_by:
          description: A list of fields that will be used for faceting your results on. Separate multiple fields with a comma.
          type: string
        facet_query:
          description: Facet values that are returned can now be filtered via this parameter. The matching facet text is also highlighted. For example, when faceting by `category`, you can set `facet_query=category:shoe` to return only facet values that contain the prefix "shoe".
          type: string
        facet_return_parent:
          description: |
            Comma separated string of nested facet fields whose parent object should be returned in facet response.
          type: string
        facet_strategy:
          description: |
            Choose the underlying faceting strategy used. Comma separated string of allows values: exhaustive, top_values or automatic (default).
          type: string
        filter_by:
          description: Filter conditions for refining youropen api validator search results. Separate multiple conditions with &&.
          example: 'num_employees:>100 && country: [USA, UK]'
          type: string
        filter_curated_hits:
          description: |
            Whether the filter_by condition of the search query should be applicable to curated results (override definitions, pinned hits, hidden hits, etc.). Default: false
          type: boolean
        group_by:
          description: You can aggregate search results into groups or buckets by specify one or more `group_by` fields. Separate multiple fields with a comma. To group on a particular field, it must be a faceted field.
          type: string
        group_limit:
          description: |
            Maximum number of hits to be returned for every group. If the `group_limit` is set as `K` then only the top K hits in each group are returned in the response. Default: 3
          type: integer
        group_missing_values:
          description: |
            Setting this parameter to true will place all documents that have a null value in the group_by field, into a single group. Setting this parameter to false, will cause each document with a null value in the group_by field to not be grouped with other documents. Default: true
          type: boolean
        hidden_hits:
          description: |
            A list of records to unconditionally hide from search results. A list of `record_id`s to hide. Eg: to hide records with IDs 123 and 456, you'd specify `123,456`.
            You could also use the Overrides feature to override search results based on rules. Overrides are applied first, followed by `pinned_hits` and finally `hidden_hits`.
          type: string
        highlight_affix_num_tokens:
          description: |
            The number of tokens that should surround the highlighted text on each side. Default: 4
          type: integer
        highlight_end_tag:
          description: |
            The end tag used for the highlighted snippets. Default: `</mark>`
          type: string
        highlight_fields:
          description: |
            A list of custom fields that must be highlighted even if you don't query for them
          type: string
        highlight_full_fields:
          description: List of fields which should be highlighted fully without snippeting
          type: string
        highlight_start_tag:
          description: |
            The start tag used for the highlighted snippets. Default: `<mark>`
          type: string
        include_fields:
          description: List of fields from the document to include in the search result
          type: string
        infix:
          description: If infix index is enabled for this field, infix searching can be done on a per-field basis by sending a comma separated string parameter called infix to the search query. This parameter can have 3 values; `off` infix search is disabled, which is default `always` infix search is performed along with regular search `fallback` infix search is performed if regular search does not produce results
          type: string
        limit:
          description: |
            Number of hits to fetch. Can be used as an alternative to the per_page parameter. Default: 10.
          type: integer
        max_candidates:
          description: |
            Control the number of words that Typesense considers for typo and prefix searching.
          type: integer
        max_extra_prefix:
          description: There are also 2 parameters that allow you to control the extent of infix searching max_extra_prefix and max_extra_suffix which specify the maximum number of symbols before or after the query that can be present in the token. For example query "K2100" has 2 extra symbols in "6PK2100". By default, any number of prefixes/suffixes can be present for a match.
          type: integer
        max_extra_suffix:
          description: There are also 2 parameters that allow you to control the extent of infix searching max_extra_prefix and max_extra_suffix which specify the maximum number of symbols before or after the query that can be present in the token. For example query "K2100" has 2 extra symbols in "6PK2100". By default, any number of prefixes/suffixes can be present for a match.
          type: integer
        max_facet_values:
          description: Maximum number of facet values to be returned.
          type: integer
        max_filter_by_candidates:
          description: Controls the number of similar words that Typesense considers during fuzzy search on filter_by values. Useful for controlling prefix matches like company_name:Acm*.
          type: integer
        min_len_1typo:
          description: |
            Minimum word length for 1-typo correction to be applied. The value of num_typos is still treated as the maximum allowed typos.
          type: integer
        min_len_2typo:
          description: |
            Minimum word length for 2-typo correction to be applied. The value of num_typos is still treated as the maximum allowed typos.
          type: integer
        num_typos:
          description: |
            The number of typographical errors (1 or 2) that would be tolerated. Default: 2
          type: string
        offset:
          description: Identifies the starting point to return hits from a result set. Can be used as an alternative to the page parameter.
          type: integer
        override_tags:
          description: Comma separated list of tags to trigger the curations rules that match the tags.
          type: string
        page:
          description: Results from this specific page number would be fetched.
          type: integer
        per_page:
          description: 'Number of results to fetch per page. Default: 10'
          type: integer
        pinned_hits:
          description: |
            A list of records to unconditionally include in the search results at specific positions. An example use case would be to feature or promote certain items on the top of search results. A list of `record_id:hit_position`. Eg: to include a record with ID 123 at Position 1 and another record with ID 456 at Position 5, you'd specify `123:1,456:5`.
            You could also use the Overrides feature to override search results based on rules. Overrides are applied first, followed by `pinned_hits` and finally `hidden_hits`.
          type: string
        pre_segmented_query:
          description: |
            You can index content from any logographic language into Typesense if you are able to segment / split the text into space-separated words yourself before indexing and querying.
            Set this parameter to true to do the same
          type: boolean
        prefix:
          description: Boolean field to indicate that the last word in the query should be treated as a prefix, and not as a whole word. This is used for building autocomplete and instant search interfaces. Defaults to true.
          type: string
        preset:
          description: |
            Search using a bunch of search parameters by setting this parameter to the name of the existing Preset.
          type: string
        prioritize_exact_match:
          default: true
          description: |
            Set this parameter to true to ensure that an exact match is ranked above the others
          type: boolean
        prioritize_num_matching_fields:
          default: true
          description: |
            Make Typesense prioritize documents where the query words appear in more number of fields.
          type: boolean
        prioritize_token_position:
          default: false
          description: |
            Make Typesense prioritize documents where the query words appear earlier in the text.
          type: boolean
        q:
          description: The query text to search for in the collection. Use * as the search string to return all documents. This is typically useful when used in conjunction with filter_by.
          type: string
        query_by:
          description: A list of `string` fields that should be queried against. Multiple fields are separated with a comma.
          type: string
        query_by_weights:
          description: The relative weight to give each `query_by` field when ranking results. This can be used to boost fields in priority, when looking for matches. Multiple fields are separated with a comma.
          type: string
        remote_embedding_num_tries:
          description: |
            Number of times to retry fetching remote embeddings.
          type: integer
        remote_embedding_timeout_ms:
          description: |
            Timeout (in milliseconds) for fetching remote embeddings.
          type: integer
        search_cutoff_ms:
          description: |
            Typesense will attempt to return results early if the cutoff time has elapsed. This is not a strict guarantee and facet computation is not bound by this parameter.
          type: integer
        snippet_threshold:
          description: |
            Field values under this length will be fully highlighted, instead of showing a snippet of relevant portion. Default: 30
          type: integer
        sort_by:
          description: A list of numerical fields and their corresponding sort orders that will be used for ordering your results. Up to 3 sort fields can be specified. The text similarity score is exposed as a special `_text_match` field that you can use in the list of sorting fields. If no `sort_by` parameter is specified, results are sorted by `_text_match:desc,default_sorting_field:desc`
          example: num_employees:desc
          type: string
        split_join_tokens:
          description: |
            Treat space as typo: search for q=basket ball if q=basketball is not found or vice-versa. Splitting/joining of tokens will only be attempted if the original query produces no results. To always trigger this behavior, set value to `always``. To disable, set value to `off`. Default is `fallback`.
          type: string
        stopwords:
          description: |
            Name of the stopwords set to apply for this search, the keywords present in the set will be removed from the search query.
          type: string
        synonym_num_typos:
          description: |
            Allow synonym resolution on typo-corrected words in the query. Default: 0
          type: integer
        synonym_prefix:
          description: |
            Allow synonym resolution on word prefixes in the query. Default: false
          type: boolean
        text_match_type:
          description: In a multi-field matching context, this parameter determines how the representative text match score of a record is calculated. Possible values are max_score (default) or max_weight.
          type: string
        typo_tokens_threshold:
          description: |
            If the number of results found for a specific query is less than this number, Typesense will attempt to look for tokens with more typos until enough results are found. Default: 100
          type: integer
        use_cache:
          description: |
            Enable server side caching of search query results. By default, caching is disabled.
          type: boolean
        vector_query:
          description: |
            Vector query expression for fetching documents "closest" to a given query/document vector.
          type: string
        voice_query:
          description: |
            The base64 encoded audio file in 16 khz 16-bit WAV format.
          type: string
      type: object
    SearchResult:
      properties:
        conversation:
          $ref: '#/components/schemas/SearchResultConversation'
        facet_counts:
          items:
            $ref: '#/components/schemas/FacetCounts'
          type: array
        found:
          description: The number of documents found
          type: integer
        found_docs:
          type: integer
        grouped_hits:
          items:
            $ref: '#/components/schemas/SearchGroupedHit'
          type: array
        hits:
          description: The documents that matched the search query
          items:
            $ref: '#/components/schemas/SearchResultHit'
          type: array
        out_of:
          description: The total number of documents in the collection
          type: integer
        page:
          description: The search result page number
          type: integer
        request_params:
          properties:
            collection_name:
              type: string
            per_page:
              type: integer
            q:
              type: string
            voice_query:
              properties:
                transcribed_query:
                  type: string
              type: object
          required:
            - collection_name
            - q
            - per_page
          type: object
        search_cutoff:
          description: Whether the search was cut off
          type: boolean
        search_time_ms:
          description: The number of milliseconds the search took
          type: integer
      type: object
    SearchResultConversation:
      properties:
        answer:
          type: string
        conversation_history:
          items:
            type: object
          type: array
        conversation_id:
          type: string
        query:
          type: string
      required:
        - answer
        - conversation_history
        - conversation_id
        - query
      type: object
    SearchResultHit:
      example:
        document:
          company_name: Stark Industries
          country: USA
          id: "124"
          num_employees: 5215
        highlights:
          company_name:
            field: company_name
            snippet: <mark>Stark</mark> Industries
        text_match: 1234556
      properties:
        document:
          description: Can be any key-value pair
          type: object
        geo_distance_meters:
          additionalProperties:
            type: integer
          description: Can be any key-value pair
          type: object
        highlight:
          additionalProperties: true
          description: Highlighted version of the matching document
          type: object
        highlights:
          description: (Deprecated) Contains highlighted portions of the search fields
          items:
            $ref: '#/components/schemas/SearchHighlight'
          type: array
        text_match:
          format: int64
          type: integer
        text_match_info:
          properties:
            best_field_score:
              type: string
            best_field_weight:
              type: integer
            fields_matched:
              type: integer
            num_tokens_dropped:
              format: int64
              type: integer
              x-go-type: uint64
            score:
              type: string
            tokens_matched:
              type: integer
            typo_prefix_score:
              type: integer
          type: object
        vector_distance:
          description: Distance between the query vector and matching document's vector value
          format: float
          type: number
      type: object
    SearchSynonym:
      allOf:
        - $ref: '#/components/schemas/SearchSynonymSchema'
        - properties:
            id:
              readOnly: true
              type: string
          required:
            - id
          type: object
    SearchSynonymDeleteResponse:
      properties:
        id:
          description: The id of the synonym that was deleted
          type: string
      required:
        - id
      type: object
    SearchSynonymSchema:
      properties:
        locale:
          description: Locale for the synonym, leave blank to use the standard tokenizer.
          type: string
        root:
          description: For 1-way synonyms, indicates the root word that words in the `synonyms` parameter map to.
          type: string
        symbols_to_index:
          description: By default, special characters are dropped from synonyms. Use this attribute to specify which special characters should be indexed as is.
          items:
            type: string
          type: array
        synonyms:
          description: Array of words that should be considered as synonyms.
          items:
            type: string
          type: array
      required:
        - synonyms
      type: object
    SearchSynonymsResponse:
      properties:
        synonyms:
          items:
            $ref: '#/components/schemas/SearchSynonym'
          type: array
          x-go-type: '[]*SearchSynonym'
      required:
        - synonyms
      type: object
    SnapshotParameters:
      properties:
        snapshot_path:
          type: string
      type: object
    StemmingDictionary:
      properties:
        id:
          description: Unique identifier for the dictionary
          example: irregular-plurals
          type: string
        words:
          description: List of word mappings in the dictionary
          items:
            properties:
              root:
                description: The root form of the word
                example: person
                type: string
              word:
                description: The word form to be stemmed
                example: people
                type: string
            required:
              - word
              - root
            type: object
          type: array
      required:
        - id
        - words
      type: object
    StopwordsSetRetrieveSchema:
      example: |
        {"stopwords": {"id": "countries", "stopwords": ["Germany", "France", "Italy"], "locale": "en"}}
      properties:
        stopwords:
          $ref: '#/components/schemas/StopwordsSetSchema'
      required:
        - stopwords
      type: object
    StopwordsSetSchema:
      example: |
        {"id": "countries", "stopwords": ["Germany", "France", "Italy"], "locale": "en"}
      properties:
        id:
          type: string
        locale:
          type: string
        stopwords:
          items:
            type: string
          type: array
      required:
        - id
        - stopwords
      type: object
    StopwordsSetUpsertSchema:
      example: |
        {"stopwords": ["Germany", "France", "Italy"], "locale": "en"}
      properties:
        locale:
          type: string
        stopwords:
          items:
            type: string
          type: array
      required:
        - stopwords
      type: object
    StopwordsSetsRetrieveAllSchema:
      example: |
        {"stopwords": [{"id": "countries", "stopwords": ["Germany", "France", "Italy"], "locale": "en"}]}
      properties:
        stopwords:
          items:
            $ref: '#/components/schemas/StopwordsSetSchema'
          type: array
      required:
        - stopwords
      type: object
    SuccessStatus:
      properties:
        success:
          type: boolean
      required:
        - success
      type: object
    VoiceQueryModelCollectionConfig:
      description: |
        Configuration for the voice query model
      properties:
        model_name:
          example: ts/whisper/base.en
          type: string
      type: object
  securitySchemes:
    api_key_header:
      in: header
      name: X-TYPESENSE-API-KEY
      type: apiKey
externalDocs:
  description: Find out more about Typsesense
  url: https://typesense.org
info:
  description: An open source search engine for building delightful search experiences.
  title: Typesense API
  version: "28.0"
openapi: 3.0.3
paths:
  /aliases:
    get:
      description: List all aliases and the corresponding collections that they map to.
      operationId: getAliases
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionAliasesResponse'
          description: List of all collection aliases
      summary: List all aliases
      tags:
        - collections
  /aliases/{aliasName}:
    delete:
      operationId: deleteAlias
      parameters:
        - description: The name of the alias to delete
          in: path
          name: aliasName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionAlias'
          description: Collection alias was deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Alias not found
      summary: Delete an alias
      tags:
        - collections
    get:
      description: Find out which collection an alias points to by fetching it
      operationId: getAlias
      parameters:
        - description: The name of the alias to retrieve
          in: path
          name: aliasName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionAlias'
          description: Collection alias fetched
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: The alias was not found
      summary: Retrieve an alias
      tags:
        - collections
    put:
      description: Create or update a collection alias. An alias is a virtual collection name that points to a real collection. If you're familiar with symbolic links on Linux, it's very similar to that. Aliases are useful when you want to reindex your data in the background on a new collection and switch your application to it without any changes to your code.
      operationId: upsertAlias
      parameters:
        - description: The name of the alias to create/update
          in: path
          name: aliasName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionAliasSchema'
        description: Collection alias to be created/updated
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionAlias'
          description: The collection alias was created/updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad request, see error message for details
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Alias not found
      summary: Create or update a collection alias
      tags:
        - collections
  /analytics/events:
    post:
      description: Sending events for analytics e.g rank search results based on popularity.
      operationId: createAnalyticsEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyticsEventCreateSchema'
        description: The Analytics event to be created
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsEventCreateResponse'
          description: Analytics event successfully created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad request, see error message for details
      summary: Create an analytics event
      tags:
        - analytics
  /analytics/rules:
    get:
      description: Retrieve the details of all analytics rules
      operationId: retrieveAnalyticsRules
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsRulesRetrieveSchema'
          description: Analytics rules fetched
      summary: Retrieves all analytics rules
      tags:
        - analytics
    post:
      description: When an analytics rule is created, we give it a name and describe the type, the source collections and the destination collection.
      operationId: createAnalyticsRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyticsRuleSchema'
        description: The Analytics rule to be created
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsRuleSchema'
          description: Analytics rule successfully created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad request, see error message for details
      summary: Creates an analytics rule
      tags:
        - analytics
  /analytics/rules/{ruleName}:
    delete:
      description: Permanently deletes an analytics rule, given it's name
      operationId: deleteAnalyticsRule
      parameters:
        - description: The name of the analytics rule to delete
          in: path
          name: ruleName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsRuleDeleteResponse'
          description: Analytics rule deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Analytics rule not found
      summary: Delete an analytics rule
      tags:
        - analytics
    get:
      description: Retrieve the details of an analytics rule, given it's name
      operationId: retrieveAnalyticsRule
      parameters:
        - description: The name of the analytics rule to retrieve
          in: path
          name: ruleName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsRuleSchema'
          description: Analytics rule fetched
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Analytics rule not found
      summary: Retrieves an analytics rule
      tags:
        - analytics
    put:
      description: Upserts an analytics rule with the given name.
      operationId: upsertAnalyticsRule
      parameters:
        - description: The name of the analytics rule to upsert
          in: path
          name: ruleName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyticsRuleUpsertSchema'
        description: The Analytics rule to be upserted
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsRuleSchema'
          description: Analytics rule successfully upserted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad request, see error message for details
      summary: Upserts an analytics rule
      tags:
        - analytics
  /collections:
    get:
      description: Returns a summary of all your collections. The collections are returned sorted by creation date, with the most recent collections appearing first.
      operationId: getCollections
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CollectionResponse'
                type: array
                x-go-type: '[]*CollectionResponse'
          description: List of all collections
      summary: List all collections
      tags:
        - collections
    post:
      description: When a collection is created, we give it a name and describe the fields that will be indexed from the documents added to the collection.
      operationId: createCollection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionSchema'
        description: The collection object to be created
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResponse'
          description: Collection successfully created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad request, see error message for details
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Collection already exists
      summary: Create a new collection
      tags:
        - collections
  /collections/{collectionName}:
    delete:
      description: Permanently drops a collection. This action cannot be undone. For large collections, this might have an impact on read latencies.
      operationId: deleteCollection
      parameters:
        - description: The name of the collection to delete
          in: path
          name: collectionName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResponse'
          description: Collection deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Collection not found
      summary: Delete a collection
      tags:
        - collections
    get:
      description: Retrieve the details of a collection, given its name.
      operationId: getCollection
      parameters:
        - description: The name of the collection to retrieve
          in: path
          name: collectionName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResponse'
          description: Collection fetched
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Collection not found
      summary: Retrieve a single collection
      tags:
        - collections
    patch:
      description: Update a collection's schema to modify the fields and their types.
      operationId: updateCollection
      parameters:
        - description: The name of the collection to update
          in: path
          name: collectionName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionUpdateSchema'
        description: The document object with fields to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionUpdateSchema'
          description: The updated partial collection schema
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad request, see error message for details
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: The collection was not found
      summary: Update a collection
      tags:
        - collections
  /collections/{collectionName}/documents:
    delete:
      description: Delete a bunch of documents that match a specific filter condition. Use the `batch_size` parameter to control the number of documents that should deleted at a time. A larger value will speed up deletions, but will impact performance of other operations running on the server.
      operationId: deleteDocuments
      parameters:
        - description: The name of the collection to delete documents from
          in: path
          name: collectionName
          required: true
          schema:
            type: string
        - in: query
          name: batch_size
          schema:
            type: integer
        - in: query
          name: filter_by
          schema:
            type: string
        - in: query
          name: ignore_not_found
          schema:
            type: boolean
        - in: query
          name: truncate
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  num_deleted:
                    type: integer
                required:
                  - num_deleted
                type: object
          description: Documents successfully deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Collection not found
      summary: Delete a bunch of documents
      tags:
        - documents
    patch:
      description: The filter_by query parameter is used to filter to specify a condition against which the documents are matched. The request body contains the fields that should be updated for any documents that match the filter condition. This endpoint is only available if the Typesense server is version `0.25.0.rc12` or later.
      operationId: updateDocuments
      parameters:
        - description: The name of the collection to update documents in
          in: path
          name: collectionName
          required: true
          schema:
            type: string
        - in: query
          name: filter_by
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              description: Can be any key-value pair
              type: object
              x-go-type: interface{}
        description: The document fields to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  num_updated:
                    description: The number of documents that have been updated
                    example: 1
                    type: integer
                required:
                  - num_updated
                type: object
          description: The response contains a single field, `num_updated`, indicating the number of documents affected.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad request, see error message for details
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: The collection was not found
      summary: Update documents with conditional query
      tags:
        - documents
    post:
      description: A document to be indexed in a given collection must conform to the schema of the collection.
      operationId: indexDocument
      parameters:
        - description: The name of the collection to add the document to
          in: path
          name: collectionName
          required: true
          schema:
            type: string
        - description: Additional action to perform
          in: query
          name: action
          schema:
            $ref: '#/components/schemas/IndexAction'
            example: upsert
            type: string
        - description: Dealing with Dirty Data
          in: query
          name: dirty_values
          schema:
            $ref: '#/components/schemas/DirtyValues'
      requestBody:
        content:
          application/json:
            schema:
              description: Can be any key-value pair
              type: object
              x-go-type: interface{}
        description: The document object to be indexed
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                description: Can be any key-value pair
                type: object
          description: Document successfully created/indexed
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Collection not found
      summary: Index a document
      tags:
        - documents
  /collections/{collectionName}/documents/{documentId}:
    delete:
      description: Delete an individual document from a collection by using its ID.
      operationId: deleteDocument
      parameters:
        - description: The name of the collection to search for the document under
          in: path
          name: collectionName
          required: true
          schema:
            type: string
        - description: The Document ID
          in: path
          name: documentId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Can be any key-value pair
                type: object
          description: The document referenced by the ID was deleted
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: The document or collection was not found
      summary: Delete a document
      tags:
        - documents
    get:
      description: Fetch an individual document from a collection by using its ID.
      operationId: getDocument
      parameters:
        - description: The name of the collection to search for the document under
          in: path
          name: collectionName
          required: true
          schema:
            type: string
        - description: The Document ID
          in: path
          name: documentId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Can be any key-value pair
                type: object
          description: The document referenced by the ID
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: The document or collection was not found
      summary: Retreive a document
      tags:
        - documents
    patch:
      description: Update an individual document from a collection by using its ID. The update can be partial.
      operationId: updateDocument
      parameters:
        - description: The name of the collection to search for the document under
          in: path
          name: collectionName
          required: true
          schema:
            type: string
        - description: The Document ID
          in: path
          name: documentId
          required: true
          schema:
            type: string
        - description: Dealing with Dirty Data
          in: query
          name: dirty_values
          schema:
            $ref: '#/components/schemas/DirtyValues'
      requestBody:
        content:
          application/json:
            schema:
              description: Can be any key-value pair
              type: object
              x-go-type: interface{}
        description: The document object with fields to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Can be any key-value pair
                type: object
          description: The document referenced by the ID was updated
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: The document or collection was not found
      summary: Update a document
      tags:
        - documents
  /collections/{collectionName}/documents/export:
    get:
      description: Export all documents in a collection in JSON lines format.
      operationId: exportDocuments
      parameters:
        - description: The name of the collection
          in: path
          name: collectionName
          required: true
          schema:
            type: string
        - in: query
          name: exclude_fields
          schema:
            type: string
        - in: query
          name: filter_by
          schema:
            type: string
        - in: query
          name: include_fields
          schema:
            type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                example: |
                  {"id": "124", "company_name": "Stark Industries", "num_employees": 5215, "country": "US"}
                  {"id": "125", "company_name": "Future Technology", "num_employees": 1232,"country": "UK"}
                  {"id": "126", "company_name": "Random Corp.", "num_employees": 531,"country": "AU"}
                type: string
          description: Exports all the documents in a given collection.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: The collection was not found
      summary: Export all documents in a collection
      tags:
        - documents
  /collections/{collectionName}/documents/import:
    post:
      description: The documents to be imported must be formatted in a newline delimited JSON structure. You can feed the output file from a Typesense export operation directly as import.
      operationId: importDocuments
      parameters:
        - description: The name of the collection
          in: path
          name: collectionName
          required: true
          schema:
            type: string
        - in: query
          name: action
          schema:
            $ref: '#/components/schemas/IndexAction'
        - in: query
          name: batch_size
          schema:
            type: integer
        - in: query
          name: dirty_values
          schema:
            $ref: '#/components/schemas/DirtyValues'
        - in: query
          name: remote_embedding_batch_size
          schema:
            type: integer
        - in: query
          name: return_doc
          schema:
            type: boolean
        - in: query
          name: return_id
          schema:
            type: boolean
      requestBody:
        content:
          application/octet-stream:
            schema:
              description: The JSONL file to import
              type: string
        description: The json array of documents or the JSONL file to import
        required: true
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                example: |
                  {"success": true}
                  {"success": false, "error": "Bad JSON.", "document": "[bad doc"}
                type: string
          description: Result of the import operation. Each line of the response indicates the result of each document present in the request body (in the same order). If the import of a single document fails, it does not affect the other documents. If there is a failure, the response line will include a corresponding error message and as well as the actual document content.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad request, see error message for details
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: The collection was not found
      summary: Import documents into a collection
      tags:
        - documents
  /collections/{collectionName}/documents/search:
    get:
      description: Search for documents in a collection that match the search criteria.
      operationId: searchCollection
      parameters:
        - description: The name of the collection to search for the document under
          in: path
          name: collectionName
          required: true
          schema:
            type: string
        - in: query
          name: cache_ttl
          schema:
            type: integer
        - in: query
          name: conversation
          schema:
            type: boolean
        - in: query
          name: conversation_id
          schema:
            type: string
        - in: query
          name: conversation_model_id
          schema:
            type: string
        - in: query
          name: drop_tokens_mode
          schema:
            $ref: '#/components/schemas/DropTokensMode'
        - in: query
          name: drop_tokens_threshold
          schema:
            type: integer
        - in: query
          name: enable_highlight_v1
          schema:
            type: boolean
        - in: query
          name: enable_overrides
          schema:
            type: boolean
        - in: query
          name: enable_synonyms
          schema:
            type: boolean
        - in: query
          name: enable_typos_for_alpha_numerical_tokens
          schema:
            type: boolean
        - in: query
          name: enable_typos_for_numerical_tokens
          schema:
            type: boolean
        - in: query
          name: exclude_fields
          schema:
            type: string
        - in: query
          name: exhaustive_search
          schema:
            type: boolean
        - in: query
          name: facet_by
          schema:
            type: string
        - in: query
          name: facet_query
          schema:
            type: string
        - in: query
          name: facet_return_parent
          schema:
            type: string
        - in: query
          name: facet_strategy
          schema:
            type: string
        - in: query
          name: filter_by
          schema:
            type: string
        - in: query
          name: filter_curated_hits
          schema:
            type: boolean
        - in: query
          name: group_by
          schema:
            type: string
        - in: query
          name: group_limit
          schema:
            type: integer
        - in: query
          name: group_missing_values
          schema:
            type: boolean
        - in: query
          name: hidden_hits
          schema:
            type: string
        - in: query
          name: highlight_affix_num_tokens
          schema:
            type: integer
        - in: query
          name: highlight_end_tag
          schema:
            type: string
        - in: query
          name: highlight_fields
          schema:
            type: string
        - in: query
          name: highlight_full_fields
          schema:
            type: string
        - in: query
          name: highlight_start_tag
          schema:
            type: string
        - in: query
          name: include_fields
          schema:
            type: string
        - in: query
          name: infix
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: max_candidates
          schema:
            type: integer
        - in: query
          name: max_extra_prefix
          schema:
            type: integer
        - in: query
          name: max_extra_suffix
          schema:
            type: integer
        - in: query
          name: max_facet_values
          schema:
            type: integer
        - in: query
          name: max_filter_by_candidates
          schema:
            type: integer
        - in: query
          name: min_len_1typo
          schema:
            type: integer
        - in: query
          name: min_len_2typo
          schema:
            type: integer
        - in: query
          name: num_typos
          schema:
            type: string
        - in: query
          name: offset
          schema:
            type: integer
        - in: query
          name: override_tags
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: per_page
          schema:
            type: integer
        - in: query
          name: pinned_hits
          schema:
            type: string
        - in: query
          name: pre_segmented_query
          schema:
            type: boolean
        - in: query
          name: prefix
          schema:
            type: string
        - in: query
          name: preset
          schema:
            type: string
        - in: query
          name: prioritize_exact_match
          schema:
            type: boolean
        - in: query
          name: prioritize_num_matching_fields
          schema:
            type: boolean
        - in: query
          name: prioritize_token_position
          schema:
            type: boolean
        - in: query
          name: q
          schema:
            type: string
        - in: query
          name: query_by
          schema:
            type: string
        - in: query
          name: query_by_weights
          schema:
            type: string
        - in: query
          name: remote_embedding_num_tries
          schema:
            type: integer
        - in: query
          name: remote_embedding_timeout_ms
          schema:
            type: integer
        - in: query
          name: search_cutoff_ms
          schema:
            type: integer
        - in: query
          name: snippet_threshold
          schema:
            type: integer
        - in: query
          name: sort_by
          schema:
            type: string
        - in: query
          name: split_join_tokens
          schema:
            type: string
        - in: query
          name: stopwords
          schema:
            type: string
        - in: query
          name: synonym_num_typos
          schema:
            type: integer
        - in: query
          name: synonym_prefix
          schema:
            type: boolean
        - in: query
          name: text_match_type
          schema:
            type: string
        - in: query
          name: typo_tokens_threshold
          schema:
            type: integer
        - in: query
          name: use_cache
          schema:
            type: boolean
        - in: query
          name: vector_query
          schema:
            type: string
        - in: query
          name: voice_query
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResult'
          description: Search results
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad request, see error message for details
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: The collection or field was not found
      summary: Search for documents in a collection
      tags:
        - documents
  /collections/{collectionName}/overrides:
    get:
      operationId: getSearchOverrides
      parameters:
        - description: The name of the collection
          in: path
          name: collectionName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchOverridesResponse'
          description: List of all search overrides
      summary: List all collection overrides
      tags:
        - documents
        - curation
  /collections/{collectionName}/overrides/{overrideId}:
    delete:
      operationId: deleteSearchOverride
      parameters:
        - description: The name of the collection
          in: path
          name: collectionName
          required: true
          schema:
            type: string
        - description: The ID of the search override to delete
          in: path
          name: overrideId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchOverrideDeleteResponse'
          description: The ID of the deleted search override
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Search override not found
      summary: Delete an override associated with a collection
      tags:
        - documents
        - curation
    get:
      description: Retrieve the details of a search override, given its id.
      operationId: getSearchOverride
      parameters:
        - description: The name of the collection
          in: path
          name: collectionName
          required: true
          schema:
            type: string
        - description: The id of the search override
          in: path
          name: overrideId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchOverride'
          description: Search override fetched
      summary: Retrieve a single search override
      tags:
        - documents
        - override
    put:
      description: Create or update an override to promote certain documents over others. Using overrides, you can include or exclude specific documents for a given query.
      operationId: upsertSearchOverride
      parameters:
        - description: The name of the collection
          in: path
          name: collectionName
          required: true
          schema:
            type: string
        - description: The ID of the search override to create/update
          in: path
          name: overrideId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchOverrideSchema'
        description: The search override object to be created/updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchOverride'
          description: Created/updated search override
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Search override not found
      summary: Create or update an override to promote certain documents over others
      tags:
        - documents
        - curation
  /collections/{collectionName}/synonyms:
    get:
      operationId: getSearchSynonyms
      parameters:
        - description: The name of the collection
          in: path
          name: collectionName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchSynonymsResponse'
          description: List of all search synonyms
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Search synonyms was not found
      summary: List all collection synonyms
      tags:
        - synonyms
  /collections/{collectionName}/synonyms/{synonymId}:
    delete:
      operationId: deleteSearchSynonym
      parameters:
        - description: The name of the collection
          in: path
          name: collectionName
          required: true
          schema:
            type: string
        - description: The ID of the search synonym to delete
          in: path
          name: synonymId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchSynonymDeleteResponse'
          description: The ID of the deleted search synonym
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Search synonym not found
      summary: Delete a synonym associated with a collection
      tags:
        - synonyms
    get:
      description: Retrieve the details of a search synonym, given its id.
      operationId: getSearchSynonym
      parameters:
        - description: The name of the collection
          in: path
          name: collectionName
          required: true
          schema:
            type: string
        - description: The id of the search synonym
          in: path
          name: synonymId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchSynonym'
          description: Search synonym fetched
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Search synonym was not found
      summary: Retrieve a single search synonym
      tags:
        - synonyms
    put:
      description: Create or update a synonym  to define search terms that should be considered equivalent.
      operationId: upsertSearchSynonym
      parameters:
        - description: The name of the collection
          in: path
          name: collectionName
          required: true
          schema:
            type: string
        - description: The ID of the search synonym to create/update
          in: path
          name: synonymId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchSynonymSchema'
        description: The search synonym object to be created/updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchSynonym'
          description: Created/updated search synonym
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Search synonym was not found
      summary: Create or update a synonym
      tags:
        - synonyms
  /conversations/models:
    get:
      description: Retrieve all conversation models
      operationId: retrieveAllConversationModels
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ConversationModelSchema'
                type: array
                x-go-type: '[]*ConversationModelSchema'
          description: List of all conversation models
      summary: List all conversation models
      tags:
        - conversations
    post:
      description: Create a Conversation Model
      operationId: createConversationModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversationModelCreateSchema'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationModelSchema'
          description: Created Conversation Model
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad request, see error message for details
      tags:
        - conversations
  /conversations/models/{modelId}:
    delete:
      description: Delete a conversation model
      operationId: deleteConversationModel
      parameters:
        - description: The id of the conversation model to delete
          in: path
          name: modelId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationModelSchema'
          description: The conversation model was successfully deleted
      summary: Delete a conversation model
      tags:
        - conversations
    get:
      description: Retrieve a conversation model
      operationId: retrieveConversationModel
      parameters:
        - description: The id of the conversation model to retrieve
          in: path
          name: modelId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationModelSchema'
          description: A conversation model
      summary: Retrieve a conversation model
      tags:
        - conversations
    put:
      description: Update a conversation model
      operationId: updateConversationModel
      parameters:
        - description: The id of the conversation model to update
          in: path
          name: modelId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversationModelUpdateSchema'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationModelSchema'
          description: The conversation model was successfully updated
      summary: Update a conversation model
      tags:
        - conversations
  /debug:
    get:
      description: Print debugging information
      operationId: debug
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  version:
                    type: string
                type: object
          description: Debugging information
      summary: Print debugging information
      tags:
        - debug
  /health:
    get:
      description: Checks if Typesense server is ready to accept requests.
      operationId: health
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
          description: Search service is ready for requests.
      summary: Checks if Typesense server is ready to accept requests.
      tags:
        - health
  /keys:
    get:
      operationId: getKeys
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeysResponse'
          description: List of all keys
      summary: Retrieve (metadata about) all keys.
      tags:
        - keys
    post:
      description: Create an API Key with fine-grain access control. You can restrict access on both a per-collection and per-action level. The generated key is returned only during creation. You want to store this key carefully in a secure place.
      operationId: createKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeySchema'
        description: The object that describes API key scope
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: Created API key
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad request, see error message for details
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: API key generation conflict
      summary: Create an API Key
      tags:
        - keys
  /keys/{keyId}:
    delete:
      operationId: deleteKey
      parameters:
        - description: The ID of the key to delete
          in: path
          name: keyId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyDeleteResponse'
          description: The key referenced by the ID
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad request, see error message for details
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Key not found
      summary: Delete an API key given its ID.
      tags:
        - keys
    get:
      description: Retrieve (metadata about) a key. Only the key prefix is returned when you retrieve a key. Due to security reasons, only the create endpoint returns the full API key.
      operationId: getKey
      parameters:
        - description: The ID of the key to retrieve
          in: path
          name: keyId
          required: true
          schema:
            format: int64
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: The key referenced by the ID
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: The key was not found
      summary: Retrieve (metadata about) a key
      tags:
        - keys
  /metrics.json:
    get:
      description: Retrieve the metrics.
      operationId: retrieveMetrics
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: Metrics fetched.
      summary: Get current RAM, CPU, Disk & Network usage metrics.
      tags:
        - operations
  /multi_search:
    post:
      description: This is especially useful to avoid round-trip network latencies incurred otherwise if each of these requests are sent in separate HTTP requests. You can also use this feature to do a federated search across multiple collections in a single HTTP request.
      operationId: multiSearch
      parameters:
        - in: query
          name: cache_ttl
          schema:
            type: integer
        - in: query
          name: conversation
          schema:
            type: boolean
        - in: query
          name: conversation_id
          schema:
            type: string
        - in: query
          name: conversation_model_id
          schema:
            type: string
        - in: query
          name: drop_tokens_mode
          schema:
            $ref: '#/components/schemas/DropTokensMode'
        - in: query
          name: drop_tokens_threshold
          schema:
            type: integer
        - in: query
          name: enable_highlight_v1
          schema:
            type: boolean
        - in: query
          name: enable_overrides
          schema:
            type: boolean
        - in: query
          name: enable_synonyms
          schema:
            type: boolean
        - in: query
          name: enable_typos_for_alpha_numerical_tokens
          schema:
            type: boolean
        - in: query
          name: enable_typos_for_numerical_tokens
          schema:
            type: boolean
        - in: query
          name: exclude_fields
          schema:
            type: string
        - in: query
          name: exhaustive_search
          schema:
            type: boolean
        - in: query
          name: facet_by
          schema:
            type: string
        - in: query
          name: facet_query
          schema:
            type: string
        - in: query
          name: facet_return_parent
          schema:
            type: string
        - in: query
          name: facet_strategy
          schema:
            type: string
        - in: query
          name: filter_by
          schema:
            type: string
        - in: query
          name: filter_curated_hits
          schema:
            type: boolean
        - in: query
          name: group_by
          schema:
            type: string
        - in: query
          name: group_limit
          schema:
            type: integer
        - in: query
          name: group_missing_values
          schema:
            type: boolean
        - in: query
          name: hidden_hits
          schema:
            type: string
        - in: query
          name: highlight_affix_num_tokens
          schema:
            type: integer
        - in: query
          name: highlight_end_tag
          schema:
            type: string
        - in: query
          name: highlight_fields
          schema:
            type: string
        - in: query
          name: highlight_full_fields
          schema:
            type: string
        - in: query
          name: highlight_start_tag
          schema:
            type: string
        - in: query
          name: include_fields
          schema:
            type: string
        - in: query
          name: infix
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: max_candidates
          schema:
            type: integer
        - in: query
          name: max_extra_prefix
          schema:
            type: integer
        - in: query
          name: max_extra_suffix
          schema:
            type: integer
        - in: query
          name: max_facet_values
          schema:
            type: integer
        - in: query
          name: max_filter_by_candidates
          schema:
            type: integer
        - in: query
          name: min_len_1typo
          schema:
            type: integer
        - in: query
          name: min_len_2typo
          schema:
            type: integer
        - in: query
          name: num_typos
          schema:
            type: string
        - in: query
          name: offset
          schema:
            type: integer
        - in: query
          name: override_tags
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: per_page
          schema:
            type: integer
        - in: query
          name: pinned_hits
          schema:
            type: string
        - in: query
          name: pre_segmented_query
          schema:
            type: boolean
        - in: query
          name: prefix
          schema:
            type: string
        - in: query
          name: preset
          schema:
            type: string
        - in: query
          name: prioritize_exact_match
          schema:
            type: boolean
        - in: query
          name: prioritize_num_matching_fields
          schema:
            type: boolean
        - in: query
          name: prioritize_token_position
          schema:
            type: boolean
        - in: query
          name: q
          schema:
            type: string
        - in: query
          name: query_by
          schema:
            type: string
        - in: query
          name: query_by_weights
          schema:
            type: string
        - in: query
          name: remote_embedding_num_tries
          schema:
            type: integer
        - in: query
          name: remote_embedding_timeout_ms
          schema:
            type: integer
        - in: query
          name: search_cutoff_ms
          schema:
            type: integer
        - in: query
          name: snippet_threshold
          schema:
            type: integer
        - in: query
          name: sort_by
          schema:
            type: string
        - in: query
          name: split_join_tokens
          schema:
            type: string
        - in: query
          name: stopwords
          schema:
            type: string
        - in: query
          name: synonym_num_typos
          schema:
            type: integer
        - in: query
          name: synonym_prefix
          schema:
            type: boolean
        - in: query
          name: text_match_type
          schema:
            type: string
        - in: query
          name: typo_tokens_threshold
          schema:
            type: integer
        - in: query
          name: use_cache
          schema:
            type: boolean
        - in: query
          name: vector_query
          schema:
            type: string
        - in: query
          name: voice_query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiSearchSearchesParameter'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiSearchResult'
          description: Search results
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad request, see error message for details
      summary: send multiple search requests in a single HTTP request
      tags:
        - documents
  /operations/schema_changes:
    get:
      description: Returns the status of any ongoing schema change operations. If no schema changes are in progress, returns an empty response.
      operationId: getSchemaChanges
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SchemaChangeStatus'
                type: array
          description: List of schema changes in progress
      summary: Get the status of in-progress schema change operations
      tags:
        - operations
  /operations/snapshot:
    post:
      description: Creates a point-in-time snapshot of a Typesense node's state and data in the specified directory. You can then backup the snapshot directory that gets created and later restore it as a data directory, as needed.
      operationId: takeSnapshot
      parameters:
        - description: The directory on the server where the snapshot should be saved.
          in: query
          name: snapshot_path
          required: true
          schema:
            type: string
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessStatus'
          description: Snapshot is created.
      summary: Creates a point-in-time snapshot of a Typesense node's state and data in the specified directory.
      tags:
        - operations
  /operations/vote:
    post:
      description: Triggers a follower node to initiate the raft voting process, which triggers leader re-election. The follower node that you run this operation against will become the new leader, once this command succeeds.
      operationId: vote
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessStatus'
          description: Re-election is performed.
      summary: Triggers a follower node to initiate the raft voting process, which triggers leader re-election.
      tags:
        - operations
  /presets:
    get:
      description: Retrieve the details of all presets
      operationId: retrieveAllPresets
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresetsRetrieveSchema'
          description: Presets fetched.
      summary: Retrieves all presets.
      tags:
        - presets
  /presets/{presetId}:
    delete:
      description: Permanently deletes a preset, given it's name.
      operationId: deletePreset
      parameters:
        - description: The ID of the preset to delete.
          example: listing_view
          in: path
          name: presetId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresetDeleteSchema'
          description: Preset deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Preset not found.
      summary: Delete a preset.
      tags:
        - presets
    get:
      description: Retrieve the details of a preset, given it's name.
      operationId: retrievePreset
      parameters:
        - description: The ID of the preset to retrieve.
          example: listing_view
          in: path
          name: presetId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresetSchema'
          description: Preset fetched.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Preset not found.
      summary: Retrieves a preset.
      tags:
        - presets
    put:
      description: Create or update an existing preset.
      operationId: upsertPreset
      parameters:
        - description: The name of the preset set to upsert.
          example: listing_view
          in: path
          name: presetId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PresetUpsertSchema'
        description: The stopwords set to upsert.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresetSchema'
          description: Preset successfully upserted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad request, see error message for details.
      summary: Upserts a preset.
      tags:
        - presets
  /stats.json:
    get:
      description: Retrieve the stats about API endpoints.
      operationId: retrieveAPIStats
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIStatsResponse'
          description: Stats fetched.
      summary: Get stats about API endpoints.
      tags:
        - operations
  /stemming/dictionaries:
    get:
      description: Retrieve a list of all available stemming dictionaries.
      operationId: listStemmingDictionaries
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  dictionaries:
                    example:
                      - irregular-plurals
                      - company-terms
                    items:
                      type: string
                    type: array
                type: object
          description: List of all dictionaries
      summary: List all stemming dictionaries
      tags:
        - stemming
  /stemming/dictionaries/{dictionaryId}:
    get:
      description: Fetch details of a specific stemming dictionary.
      operationId: getStemmingDictionary
      parameters:
        - description: The ID of the dictionary to retrieve
          example: irregular-plurals
          in: path
          name: dictionaryId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StemmingDictionary'
          description: Stemming dictionary details
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Dictionary not found
      summary: Retrieve a stemming dictionary
      tags:
        - stemming
  /stemming/dictionaries/import:
    post:
      description: Upload a JSONL file containing word mappings to create or update a stemming dictionary.
      operationId: importStemmingDictionary
      parameters:
        - description: The ID to assign to the dictionary
          example: irregular-plurals
          in: query
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              example: |
                {"word": "people", "root": "person"}
                {"word": "children", "root": "child"}
              type: string
        description: The JSONL file containing word mappings
        required: true
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                example: |
                  {"word": "people", "root": "person"} {"word": "children", "root": "child"}
                type: string
          description: Dictionary successfully imported
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad request, see error message for details
      summary: Import a stemming dictionary
      tags:
        - stemming
  /stopwords:
    get:
      description: Retrieve the details of all stopwords sets
      operationId: retrieveStopwordsSets
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopwordsSetsRetrieveAllSchema'
          description: Stopwords sets fetched.
      summary: Retrieves all stopwords sets.
      tags:
        - stopwords
  /stopwords/{setId}:
    delete:
      description: Permanently deletes a stopwords set, given it's name.
      operationId: deleteStopwordsSet
      parameters:
        - description: The ID of the stopwords set to delete.
          example: countries
          in: path
          name: setId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                example: |
                  {"id": "countries"}
                properties:
                  id:
                    type: string
                required:
                  - id
                type: object
          description: Stopwords set rule deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Stopwords set not found.
      summary: Delete a stopwords set.
      tags:
        - stopwords
    get:
      description: Retrieve the details of a stopwords set, given it's name.
      operationId: retrieveStopwordsSet
      parameters:
        - description: The ID of the stopwords set to retrieve.
          example: countries
          in: path
          name: setId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopwordsSetRetrieveSchema'
          description: Stopwords set fetched.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Stopwords set not found.
      summary: Retrieves a stopwords set.
      tags:
        - stopwords
    put:
      description: When an analytics rule is created, we give it a name and describe the type, the source collections and the destination collection.
      operationId: upsertStopwordsSet
      parameters:
        - description: The ID of the stopwords set to upsert.
          example: countries
          in: path
          name: setId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopwordsSetUpsertSchema'
        description: The stopwords set to upsert.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopwordsSetSchema'
          description: Stopwords set successfully upserted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: Bad request, see error message for details.
      summary: Upserts a stopwords set.
      tags:
        - stopwords
security:
  - api_key_header: []
tags:
  - description: A collection is defined by a schema
    externalDocs:
      description: Find out more
      url: https://typesense.org/api/#create-collection
    name: collections
  - description: A document is an individual record to be indexed and belongs to a collection
    externalDocs:
      description: Find out more
      url: https://typesense.org/api/#index-document
    name: documents
  - description: Hand-curate search results based on conditional business rules
    externalDocs:
      description: Find out more
      url: https://typesense.org/docs/0.23.0/api/#curation
    name: curation
  - description: Typesense can aggregate search queries for both analytics purposes and for query suggestions.
    externalDocs:
      description: Find out more
      url: https://typesense.org/docs/28.0/api/analytics-query-suggestions.html
    name: analytics
  - description: Manage API Keys with fine-grain access control
    externalDocs:
      description: Find out more
      url: https://typesense.org/docs/0.23.0/api/#api-keys
    name: keys
  - description: Debugging information
    name: debug
  - description: Manage Typesense cluster
    externalDocs:
      description: Find out more
      url: https://typesense.org/docs/28.0/api/cluster-operations.html
    name: operations
  - description: Manage stopwords sets
    externalDocs:
      description: Find out more
      url: https://typesense.org/docs/28.0/api/stopwords.html
    name: stopwords
  - description: Store and reference search parameters
    externalDocs:
      description: Find out more
      url: https://typesense.org/docs/28.0/api/search.html#presets
    name: presets
  - description: Conversational Search (RAG)
    externalDocs:
      description: Find out more
      url: https://typesense.org/docs/28.0/api/conversational-search-rag.html
    name: conversations
  - description: Manage synonyms
    externalDocs:
      description: Find out more
      url: https://typesense.org/docs/28.0/api/synonyms.html
    name: synonyms
  - description: Manage stemming dictionaries
    externalDocs:
      description: Find out more
      url: https://typesense.org/docs/28.0/api/stemming.html
    name: stemming
